# Generated from JavaParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0084")
        buf.write("\u06fd\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\3\2\5")
        buf.write("\2\u0108\n\2\3\2\3\2\7\2\u010c\n\2\f\2\16\2\u010f\13\2")
        buf.write("\3\2\3\2\7\2\u0113\n\2\f\2\16\2\u0116\13\2\3\2\3\2\3\2")
        buf.write("\5\2\u011b\n\2\3\3\7\3\u011e\n\3\f\3\16\3\u0121\13\3\3")
        buf.write("\3\3\3\3\3\3\3\3\4\3\4\5\4\u0129\n\4\3\4\3\4\3\4\5\4\u012e")
        buf.write("\n\4\3\4\3\4\3\5\7\5\u0133\n\5\f\5\16\5\u0136\13\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u013d\n\5\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u0144\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u0150\n\7\3\b\3\b\5\b\u0154\n\b\3\t\3\t\3\t\5\t\u0159")
        buf.write("\n\t\3\t\5\t\u015c\n\t\3\t\3\t\5\t\u0160\n\t\3\t\3\t\5")
        buf.write("\t\u0164\n\t\3\t\3\t\5\t\u0168\n\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\7\n\u0170\n\n\f\n\16\n\u0173\13\n\3\n\3\n\3\13\7")
        buf.write("\13\u0178\n\13\f\13\16\13\u017b\13\13\3\13\3\13\3\13\7")
        buf.write("\13\u0180\n\13\f\13\16\13\u0183\13\13\3\13\5\13\u0186")
        buf.write("\n\13\3\f\3\f\3\f\7\f\u018b\n\f\f\f\16\f\u018e\13\f\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u0194\n\r\3\r\3\r\5\r\u0198\n\r\3\r")
        buf.write("\5\r\u019b\n\r\3\r\5\r\u019e\n\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\7\16\u01a5\n\16\f\16\16\16\u01a8\13\16\3\17\7\17\u01ab")
        buf.write("\n\17\f\17\16\17\u01ae\13\17\3\17\3\17\5\17\u01b2\n\17")
        buf.write("\3\17\5\17\u01b5\n\17\3\20\3\20\7\20\u01b9\n\20\f\20\16")
        buf.write("\20\u01bc\13\20\3\21\3\21\3\21\5\21\u01c1\n\21\3\21\3")
        buf.write("\21\5\21\u01c5\n\21\3\21\3\21\5\21\u01c9\n\21\3\21\3\21")
        buf.write("\3\22\3\22\7\22\u01cf\n\22\f\22\16\22\u01d2\13\22\3\22")
        buf.write("\3\22\3\23\3\23\7\23\u01d8\n\23\f\23\16\23\u01db\13\23")
        buf.write("\3\23\3\23\3\24\3\24\5\24\u01e1\n\24\3\24\3\24\7\24\u01e5")
        buf.write("\n\24\f\24\16\24\u01e8\13\24\3\24\5\24\u01eb\n\24\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u01f7")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\7\26\u01fe\n\26\f\26\16")
        buf.write("\26\u0201\13\26\3\26\3\26\5\26\u0205\n\26\3\26\3\26\3")
        buf.write("\27\3\27\5\27\u020b\n\27\3\30\3\30\5\30\u020f\n\30\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\5\33\u021b")
        buf.write("\n\33\3\33\3\33\3\34\7\34\u0220\n\34\f\34\16\34\u0223")
        buf.write("\13\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\7\36\u022d")
        buf.write("\n\36\f\36\16\36\u0230\13\36\3\36\3\36\5\36\u0234\n\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u023e\n")
        buf.write("\37\3 \3 \3 \3 \7 \u0244\n \f \16 \u0247\13 \3 \3 \3!")
        buf.write("\3!\3!\7!\u024e\n!\f!\16!\u0251\13!\3!\3!\3!\3\"\7\"\u0257")
        buf.write("\n\"\f\"\16\"\u025a\13\"\3\"\3\"\3#\3#\3#\3#\3#\3#\5#")
        buf.write("\u0264\n#\3$\7$\u0267\n$\f$\16$\u026a\13$\3$\3$\3$\3%")
        buf.write("\7%\u0270\n%\f%\16%\u0273\13%\3%\3%\3%\3%\3%\7%\u027a")
        buf.write("\n%\f%\16%\u027d\13%\3%\3%\5%\u0281\n%\3%\3%\3&\3&\3&")
        buf.write("\7&\u0288\n&\f&\16&\u028b\13&\3\'\3\'\3\'\5\'\u0290\n")
        buf.write("\'\3(\3(\5(\u0294\n(\3(\3(\7(\u0298\n(\f(\16(\u029b\13")
        buf.write("(\3)\3)\5)\u029f\n)\3*\3*\3*\3*\7*\u02a5\n*\f*\16*\u02a8")
        buf.write("\13*\3*\5*\u02ab\n*\5*\u02ad\n*\3*\3*\3+\3+\5+\u02b3\n")
        buf.write("+\3+\3+\7+\u02b7\n+\f+\16+\u02ba\13+\3+\3+\5+\u02be\n")
        buf.write("+\3,\3,\7,\u02c2\n,\f,\16,\u02c5\13,\3,\3,\3,\5,\u02ca")
        buf.write("\n,\5,\u02cc\n,\3-\3-\3-\7-\u02d1\n-\f-\16-\u02d4\13-")
        buf.write("\3.\3.\5.\u02d8\n.\3.\3.\3.\5.\u02dd\n.\3.\5.\u02e0\n")
        buf.write(".\5.\u02e2\n.\3.\3.\3/\3/\3/\3/\7/\u02ea\n/\f/\16/\u02ed")
        buf.write("\13/\3/\3/\3\60\3\60\3\60\7\60\u02f4\n\60\f\60\16\60\u02f7")
        buf.write("\13\60\3\60\3\60\5\60\u02fb\n\60\3\60\5\60\u02fe\n\60")
        buf.write("\3\61\7\61\u0301\n\61\f\61\16\61\u0304\13\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u030a\n\61\3\62\7\62\u030d\n\62\f\62\16")
        buf.write("\62\u0310\13\62\3\62\3\62\7\62\u0314\n\62\f\62\16\62\u0317")
        buf.write("\13\62\3\62\3\62\3\62\3\63\3\63\3\63\7\63\u031f\n\63\f")
        buf.write("\63\16\63\u0322\13\63\3\64\7\64\u0325\n\64\f\64\16\64")
        buf.write("\u0328\13\64\3\64\3\64\3\64\3\65\3\65\3\65\7\65\u0330")
        buf.write("\n\65\f\65\16\65\u0333\13\65\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\5\66\u033c\n\66\3\67\3\67\38\38\39\39\39\7")
        buf.write("9\u0345\n9\f9\169\u0348\139\39\39\39\3:\3:\3:\5:\u0350")
        buf.write("\n:\3:\3:\3:\5:\u0355\n:\3:\5:\u0358\n:\3;\3;\3;\7;\u035d")
        buf.write("\n;\f;\16;\u0360\13;\3<\3<\3<\3<\3=\3=\3=\5=\u0369\n=")
        buf.write("\3>\3>\3>\3>\7>\u036f\n>\f>\16>\u0372\13>\5>\u0374\n>")
        buf.write("\3>\5>\u0377\n>\3>\3>\3?\3?\3?\3?\3?\3@\3@\7@\u0382\n")
        buf.write("@\f@\16@\u0385\13@\3@\3@\3A\7A\u038a\nA\fA\16A\u038d\13")
        buf.write("A\3A\3A\5A\u0391\nA\3B\3B\3B\3B\3B\3B\5B\u0399\nB\3B\3")
        buf.write("B\5B\u039d\nB\3B\3B\5B\u03a1\nB\3B\3B\5B\u03a5\nB\3B\3")
        buf.write("B\5B\u03a9\nB\5B\u03ab\nB\3C\3C\5C\u03af\nC\3D\3D\3D\3")
        buf.write("D\5D\u03b5\nD\3E\3E\3F\3F\3F\3G\5G\u03bd\nG\3G\3G\3G\3")
        buf.write("G\3H\3H\7H\u03c5\nH\fH\16H\u03c8\13H\3H\3H\3I\3I\7I\u03ce")
        buf.write("\nI\fI\16I\u03d1\13I\3I\3I\3I\3I\3I\3I\3I\5I\u03da\nI")
        buf.write("\3I\3I\3I\3I\3I\3I\5I\u03e2\nI\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\5I\u03f0\nI\3J\3J\3K\3K\3K\5K\u03f7\nK\3")
        buf.write("K\3K\3K\5K\u03fc\nK\3K\3K\3L\3L\5L\u0402\nL\3L\3L\3M\3")
        buf.write("M\3M\7M\u0409\nM\fM\16M\u040c\13M\3N\3N\3N\3O\3O\3O\7")
        buf.write("O\u0414\nO\fO\16O\u0417\13O\3O\3O\3P\3P\7P\u041d\nP\f")
        buf.write("P\16P\u0420\13P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u042b\n")
        buf.write("Q\3R\7R\u042e\nR\fR\16R\u0431\13R\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\5R\u043b\nR\3S\3S\3T\3T\3U\7U\u0442\nU\fU\16U\u0445")
        buf.write("\13U\3U\3U\3U\5U\u044a\nU\3V\3V\3V\3V\3V\5V\u0451\nV\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\5V\u045a\nV\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\6V\u046f\nV\rV\16V")
        buf.write("\u0470\3V\5V\u0474\nV\3V\5V\u0477\nV\3V\3V\3V\3V\7V\u047d")
        buf.write("\nV\fV\16V\u0480\13V\3V\5V\u0483\nV\3V\3V\3V\3V\7V\u0489")
        buf.write("\nV\fV\16V\u048c\13V\3V\7V\u048f\nV\fV\16V\u0492\13V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\5V\u049c\nV\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\5V\u04a5\nV\3V\3V\3V\5V\u04aa\nV\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\5V\u04b7\nV\3V\3V\3V\3V\5V\u04bd\nV\3W\3")
        buf.write("W\3W\7W\u04c2\nW\fW\16W\u04c5\13W\3W\3W\3W\3W\3W\3X\3")
        buf.write("X\3X\7X\u04cf\nX\fX\16X\u04d2\13X\3Y\3Y\3Y\3Z\3Z\3Z\5")
        buf.write("Z\u04da\nZ\3Z\3Z\3[\3[\3[\7[\u04e1\n[\f[\16[\u04e4\13")
        buf.write("[\3\\\7\\\u04e7\n\\\f\\\16\\\u04ea\13\\\3\\\3\\\3\\\3")
        buf.write("\\\3\\\5\\\u04f1\n\\\3\\\3\\\3\\\3\\\5\\\u04f7\n\\\3]")
        buf.write("\6]\u04fa\n]\r]\16]\u04fb\3]\6]\u04ff\n]\r]\16]\u0500")
        buf.write("\3^\3^\3^\3^\3^\3^\5^\u0509\n^\3^\3^\3^\5^\u050e\n^\3")
        buf.write("_\3_\5_\u0512\n_\3_\3_\5_\u0516\n_\3_\3_\5_\u051a\n_\5")
        buf.write("_\u051c\n_\3`\3`\5`\u0520\n`\3a\7a\u0523\na\fa\16a\u0526")
        buf.write("\13a\3a\3a\5a\u052a\na\3a\3a\3a\3a\3b\3b\3b\3b\3c\3c\3")
        buf.write("c\7c\u0537\nc\fc\16c\u053a\13c\3d\3d\3d\5d\u053f\nd\3")
        buf.write("d\3d\3e\3e\3e\3e\3e\3e\5e\u0549\ne\3e\3e\5e\u054d\ne\3")
        buf.write("e\3e\3e\5e\u0552\ne\3e\3e\3e\3e\3e\3e\3e\7e\u055b\ne\f")
        buf.write("e\16e\u055e\13e\3e\3e\3e\7e\u0563\ne\fe\16e\u0566\13e")
        buf.write("\3e\3e\3e\3e\3e\3e\5e\u056e\ne\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\5e\u057e\ne\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\5")
        buf.write("e\u05ab\ne\3e\3e\3e\3e\5e\u05b1\ne\3e\3e\3e\5e\u05b6\n")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\5e\u05bf\ne\7e\u05c1\ne\fe\16e")
        buf.write("\u05c4\13e\3f\7f\u05c7\nf\ff\16f\u05ca\13f\3f\3f\7f\u05ce")
        buf.write("\nf\ff\16f\u05d1\13f\3f\3f\3g\3g\3g\3g\3h\3h\3h\5h\u05dc")
        buf.write("\nh\3h\3h\3h\3h\3h\7h\u05e3\nh\fh\16h\u05e6\13h\3h\3h")
        buf.write("\3h\3h\5h\u05ec\nh\3h\5h\u05ef\nh\3i\3i\5i\u05f3\ni\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0606")
        buf.write("\nj\5j\u0608\nj\3k\3k\3k\3k\7k\u060e\nk\fk\16k\u0611\13")
        buf.write("k\3k\3k\3l\3l\3l\3l\5l\u0619\nl\3l\3l\3l\3l\3l\5l\u0620")
        buf.write("\nl\3m\3m\3m\3m\3m\3m\7m\u0628\nm\fm\16m\u062b\13m\3m")
        buf.write("\3m\7m\u062f\nm\fm\16m\u0632\13m\3m\3m\3m\7m\u0637\nm")
        buf.write("\fm\16m\u063a\13m\5m\u063c\nm\3m\3m\3m\7m\u0641\nm\fm")
        buf.write("\16m\u0644\13m\3n\3n\7n\u0648\nn\fn\16n\u064b\13n\5n\u064d")
        buf.write("\nn\3o\3o\3o\5o\u0652\no\3o\7o\u0655\no\fo\16o\u0658\13")
        buf.write("o\3o\3o\5o\u065c\no\3p\5p\u065f\np\3p\3p\3p\3p\3p\3p\5")
        buf.write("p\u0667\np\3q\3q\5q\u066b\nq\3q\3q\3q\5q\u0670\nq\7q\u0672")
        buf.write("\nq\fq\16q\u0675\13q\3q\5q\u0678\nq\3r\3r\5r\u067c\nr")
        buf.write("\3r\3r\3s\3s\6s\u0682\ns\rs\16s\u0683\3s\3s\3s\3s\3s\6")
        buf.write("s\u068b\ns\rs\16s\u068c\3s\3s\7s\u0691\ns\fs\16s\u0694")
        buf.write("\13s\5s\u0696\ns\3t\3t\5t\u069a\nt\3u\3u\3u\3v\3v\3v\5")
        buf.write("v\u06a2\nv\3w\3w\3w\5w\u06a7\nw\3x\3x\3x\3x\3y\3y\3y\7")
        buf.write("y\u06b0\ny\fy\16y\u06b3\13y\3z\7z\u06b6\nz\fz\16z\u06b9")
        buf.write("\13z\3z\3z\3z\5z\u06be\nz\3z\7z\u06c1\nz\fz\16z\u06c4")
        buf.write("\13z\3z\3z\7z\u06c8\nz\fz\16z\u06cb\13z\3{\3{\3|\3|\3")
        buf.write("|\3|\7|\u06d3\n|\f|\16|\u06d6\13|\3|\3|\3}\3}\3}\5}\u06dd")
        buf.write("\n}\3}\3}\5}\u06e1\n}\5}\u06e3\n}\3~\3~\3~\3~\3~\5~\u06ea")
        buf.write("\n~\3\177\3\177\5\177\u06ee\n\177\3\177\3\177\3\u0080")
        buf.write("\3\u0080\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\2\4\u00c8\u00d8\u0084")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\2\21\4\2\23\23**\3\2EH\3\2IJ\4\2((>>\5\2")
        buf.write("\65C||\u0084\u0084\5\2\65>AC\u0084\u0084\4\2\\]fi\4\2")
        buf.write("jkoo\3\2hi\4\2Z[ab\4\2``cc\4\2YYpz\3\2fg\4\2__}}\13\2")
        buf.write("\5\5\7\7\n\n\20\20\26\26\35\35\37\37\'\'{{\2\u07c4\2\u011a")
        buf.write("\3\2\2\2\4\u011f\3\2\2\2\6\u0126\3\2\2\2\b\u0134\3\2\2")
        buf.write("\2\n\u0143\3\2\2\2\f\u014f\3\2\2\2\16\u0153\3\2\2\2\20")
        buf.write("\u0155\3\2\2\2\22\u016b\3\2\2\2\24\u0179\3\2\2\2\26\u0187")
        buf.write("\3\2\2\2\30\u018f\3\2\2\2\32\u01a1\3\2\2\2\34\u01ac\3")
        buf.write("\2\2\2\36\u01b6\3\2\2\2 \u01bd\3\2\2\2\"\u01cc\3\2\2\2")
        buf.write("$\u01d5\3\2\2\2&\u01ea\3\2\2\2(\u01f6\3\2\2\2*\u01f8\3")
        buf.write("\2\2\2,\u020a\3\2\2\2.\u020e\3\2\2\2\60\u0210\3\2\2\2")
        buf.write("\62\u0213\3\2\2\2\64\u0216\3\2\2\2\66\u0221\3\2\2\28\u0227")
        buf.write("\3\2\2\2:\u0233\3\2\2\2<\u023d\3\2\2\2>\u023f\3\2\2\2")
        buf.write("@\u024a\3\2\2\2B\u0258\3\2\2\2D\u0263\3\2\2\2F\u0268\3")
        buf.write("\2\2\2H\u0271\3\2\2\2J\u0284\3\2\2\2L\u028c\3\2\2\2N\u0293")
        buf.write("\3\2\2\2P\u029e\3\2\2\2R\u02a0\3\2\2\2T\u02b8\3\2\2\2")
        buf.write("V\u02cb\3\2\2\2X\u02cd\3\2\2\2Z\u02d5\3\2\2\2\\\u02e5")
        buf.write("\3\2\2\2^\u02fd\3\2\2\2`\u0309\3\2\2\2b\u030e\3\2\2\2")
        buf.write("d\u031b\3\2\2\2f\u0326\3\2\2\2h\u032c\3\2\2\2j\u033b\3")
        buf.write("\2\2\2l\u033d\3\2\2\2n\u033f\3\2\2\2p\u0346\3\2\2\2r\u034f")
        buf.write("\3\2\2\2t\u0359\3\2\2\2v\u0361\3\2\2\2x\u0368\3\2\2\2")
        buf.write("z\u036a\3\2\2\2|\u037a\3\2\2\2~\u037f\3\2\2\2\u0080\u0390")
        buf.write("\3\2\2\2\u0082\u03aa\3\2\2\2\u0084\u03ae\3\2\2\2\u0086")
        buf.write("\u03b0\3\2\2\2\u0088\u03b6\3\2\2\2\u008a\u03b8\3\2\2\2")
        buf.write("\u008c\u03bc\3\2\2\2\u008e\u03c2\3\2\2\2\u0090\u03ef\3")
        buf.write("\2\2\2\u0092\u03f1\3\2\2\2\u0094\u03f3\3\2\2\2\u0096\u03ff")
        buf.write("\3\2\2\2\u0098\u0405\3\2\2\2\u009a\u040d\3\2\2\2\u009c")
        buf.write("\u0410\3\2\2\2\u009e\u041a\3\2\2\2\u00a0\u042a\3\2\2\2")
        buf.write("\u00a2\u042f\3\2\2\2\u00a4\u043c\3\2\2\2\u00a6\u043e\3")
        buf.write("\2\2\2\u00a8\u0443\3\2\2\2\u00aa\u04bc\3\2\2\2\u00ac\u04be")
        buf.write("\3\2\2\2\u00ae\u04cb\3\2\2\2\u00b0\u04d3\3\2\2\2\u00b2")
        buf.write("\u04d6\3\2\2\2\u00b4\u04dd\3\2\2\2\u00b6\u04f6\3\2\2\2")
        buf.write("\u00b8\u04f9\3\2\2\2\u00ba\u050d\3\2\2\2\u00bc\u051b\3")
        buf.write("\2\2\2\u00be\u051f\3\2\2\2\u00c0\u0524\3\2\2\2\u00c2\u052f")
        buf.write("\3\2\2\2\u00c4\u0533\3\2\2\2\u00c6\u053e\3\2\2\2\u00c8")
        buf.write("\u056d\3\2\2\2\u00ca\u05c8\3\2\2\2\u00cc\u05d4\3\2\2\2")
        buf.write("\u00ce\u05ee\3\2\2\2\u00d0\u05f2\3\2\2\2\u00d2\u0607\3")
        buf.write("\2\2\2\u00d4\u0609\3\2\2\2\u00d6\u061f\3\2\2\2\u00d8\u063b")
        buf.write("\3\2\2\2\u00da\u064c\3\2\2\2\u00dc\u0651\3\2\2\2\u00de")
        buf.write("\u0666\3\2\2\2\u00e0\u0677\3\2\2\2\u00e2\u0679\3\2\2\2")
        buf.write("\u00e4\u0695\3\2\2\2\u00e6\u0697\3\2\2\2\u00e8\u069b\3")
        buf.write("\2\2\2\u00ea\u06a1\3\2\2\2\u00ec\u06a6\3\2\2\2\u00ee\u06a8")
        buf.write("\3\2\2\2\u00f0\u06ac\3\2\2\2\u00f2\u06b7\3\2\2\2\u00f4")
        buf.write("\u06cc\3\2\2\2\u00f6\u06ce\3\2\2\2\u00f8\u06e2\3\2\2\2")
        buf.write("\u00fa\u06e9\3\2\2\2\u00fc\u06eb\3\2\2\2\u00fe\u06f1\3")
        buf.write("\2\2\2\u0100\u06f3\3\2\2\2\u0102\u06f6\3\2\2\2\u0104\u06f9")
        buf.write("\3\2\2\2\u0106\u0108\5\4\3\2\u0107\u0106\3\2\2\2\u0107")
        buf.write("\u0108\3\2\2\2\u0108\u010d\3\2\2\2\u0109\u010c\5\6\4\2")
        buf.write("\u010a\u010c\7V\2\2\u010b\u0109\3\2\2\2\u010b\u010a\3")
        buf.write("\2\2\2\u010c\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e")
        buf.write("\3\2\2\2\u010e\u0114\3\2\2\2\u010f\u010d\3\2\2\2\u0110")
        buf.write("\u0113\5\b\5\2\u0111\u0113\7V\2\2\u0112\u0110\3\2\2\2")
        buf.write("\u0112\u0111\3\2\2\2\u0113\u0116\3\2\2\2\u0114\u0112\3")
        buf.write("\2\2\2\u0114\u0115\3\2\2\2\u0115\u011b\3\2\2\2\u0116\u0114")
        buf.write("\3\2\2\2\u0117\u0118\5\u008cG\2\u0118\u0119\7\2\2\3\u0119")
        buf.write("\u011b\3\2\2\2\u011a\u0107\3\2\2\2\u011a\u0117\3\2\2\2")
        buf.write("\u011b\3\3\2\2\2\u011c\u011e\5r:\2\u011d\u011c\3\2\2\2")
        buf.write("\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3")
        buf.write("\2\2\2\u0120\u0122\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123")
        buf.write("\7\"\2\2\u0123\u0124\5h\65\2\u0124\u0125\7V\2\2\u0125")
        buf.write("\5\3\2\2\2\u0126\u0128\7\33\2\2\u0127\u0129\7(\2\2\u0128")
        buf.write("\u0127\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write("\u012a\u012d\5h\65\2\u012b\u012c\7X\2\2\u012c\u012e\7")
        buf.write("j\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\u0130\7V\2\2\u0130\7\3\2\2\2\u0131\u0133")
        buf.write("\5\f\7\2\u0132\u0131\3\2\2\2\u0133\u0136\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u013c\3\2\2\2")
        buf.write("\u0136\u0134\3\2\2\2\u0137\u013d\5\20\t\2\u0138\u013d")
        buf.write("\5\30\r\2\u0139\u013d\5 \21\2\u013a\u013d\5|?\2\u013b")
        buf.write("\u013d\5\u0094K\2\u013c\u0137\3\2\2\2\u013c\u0138\3\2")
        buf.write("\2\2\u013c\u0139\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013b")
        buf.write("\3\2\2\2\u013d\t\3\2\2\2\u013e\u0144\5\f\7\2\u013f\u0144")
        buf.write("\7 \2\2\u0140\u0144\7,\2\2\u0141\u0144\7\60\2\2\u0142")
        buf.write("\u0144\7\63\2\2\u0143\u013e\3\2\2\2\u0143\u013f\3\2\2")
        buf.write("\2\u0143\u0140\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0142")
        buf.write("\3\2\2\2\u0144\13\3\2\2\2\u0145\u0150\5r:\2\u0146\u0150")
        buf.write("\7%\2\2\u0147\u0150\7$\2\2\u0148\u0150\7#\2\2\u0149\u0150")
        buf.write("\7(\2\2\u014a\u0150\7\3\2\2\u014b\u0150\7\24\2\2\u014c")
        buf.write("\u0150\7)\2\2\u014d\u0150\7B\2\2\u014e\u0150\7D\2\2\u014f")
        buf.write("\u0145\3\2\2\2\u014f\u0146\3\2\2\2\u014f\u0147\3\2\2\2")
        buf.write("\u014f\u0148\3\2\2\2\u014f\u0149\3\2\2\2\u014f\u014a\3")
        buf.write("\2\2\2\u014f\u014b\3\2\2\2\u014f\u014c\3\2\2\2\u014f\u014d")
        buf.write("\3\2\2\2\u014f\u014e\3\2\2\2\u0150\r\3\2\2\2\u0151\u0154")
        buf.write("\7\24\2\2\u0152\u0154\5r:\2\u0153\u0151\3\2\2\2\u0153")
        buf.write("\u0152\3\2\2\2\u0154\17\3\2\2\2\u0155\u0158\7\13\2\2\u0156")
        buf.write("\u0159\5\u00fe\u0080\2\u0157\u0159\5\u00a4S\2\u0158\u0156")
        buf.write("\3\2\2\2\u0158\u0157\3\2\2\2\u0159\u015b\3\2\2\2\u015a")
        buf.write("\u015c\5\22\n\2\u015b\u015a\3\2\2\2\u015b\u015c\3\2\2")
        buf.write("\2\u015c\u015f\3\2\2\2\u015d\u015e\7\23\2\2\u015e\u0160")
        buf.write("\5\u00f2z\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160")
        buf.write("\u0163\3\2\2\2\u0161\u0162\7\32\2\2\u0162\u0164\5\u00f0")
        buf.write("y\2\u0163\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0167")
        buf.write("\3\2\2\2\u0165\u0166\7C\2\2\u0166\u0168\5\u00f0y\2\u0167")
        buf.write("\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016a\5\"\22\2\u016a\21\3\2\2\2\u016b\u016c\7[")
        buf.write("\2\2\u016c\u0171\5\24\13\2\u016d\u016e\7W\2\2\u016e\u0170")
        buf.write("\5\24\13\2\u016f\u016d\3\2\2\2\u0170\u0173\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174\3\2\2\2")
        buf.write("\u0173\u0171\3\2\2\2\u0174\u0175\7Z\2\2\u0175\23\3\2\2")
        buf.write("\2\u0176\u0178\5r:\2\u0177\u0176\3\2\2\2\u0178\u017b\3")
        buf.write("\2\2\2\u0179\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017c")
        buf.write("\3\2\2\2\u017b\u0179\3\2\2\2\u017c\u0185\5\u00a4S\2\u017d")
        buf.write("\u0181\7\23\2\2\u017e\u0180\5r:\2\u017f\u017e\3\2\2\2")
        buf.write("\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3")
        buf.write("\2\2\2\u0182\u0184\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0186")
        buf.write("\5\26\f\2\u0185\u017d\3\2\2\2\u0185\u0186\3\2\2\2\u0186")
        buf.write("\25\3\2\2\2\u0187\u018c\5\u00f2z\2\u0188\u0189\7l\2\2")
        buf.write("\u0189\u018b\5\u00f2z\2\u018a\u0188\3\2\2\2\u018b\u018e")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\27\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0190\7\22\2\2\u0190")
        buf.write("\u0193\5\u00a4S\2\u0191\u0192\7\32\2\2\u0192\u0194\5\u00f0")
        buf.write("y\2\u0193\u0191\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0195")
        buf.write("\3\2\2\2\u0195\u0197\7R\2\2\u0196\u0198\5\32\16\2\u0197")
        buf.write("\u0196\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u019a\3\2\2\2")
        buf.write("\u0199\u019b\7W\2\2\u019a\u0199\3\2\2\2\u019a\u019b\3")
        buf.write("\2\2\2\u019b\u019d\3\2\2\2\u019c\u019e\5\36\20\2\u019d")
        buf.write("\u019c\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u019f\3\2\2\2")
        buf.write("\u019f\u01a0\7S\2\2\u01a0\31\3\2\2\2\u01a1\u01a6\5\34")
        buf.write("\17\2\u01a2\u01a3\7W\2\2\u01a3\u01a5\5\34\17\2\u01a4\u01a2")
        buf.write("\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6")
        buf.write("\u01a7\3\2\2\2\u01a7\33\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a9")
        buf.write("\u01ab\5r:\2\u01aa\u01a9\3\2\2\2\u01ab\u01ae\3\2\2\2\u01ac")
        buf.write("\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01af\3\2\2\2")
        buf.write("\u01ae\u01ac\3\2\2\2\u01af\u01b1\5\u00a4S\2\u01b0\u01b2")
        buf.write("\5\u00fc\177\2\u01b1\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2")
        buf.write("\u01b2\u01b4\3\2\2\2\u01b3\u01b5\5\"\22\2\u01b4\u01b3")
        buf.write("\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\35\3\2\2\2\u01b6\u01ba")
        buf.write("\7V\2\2\u01b7\u01b9\5&\24\2\u01b8\u01b7\3\2\2\2\u01b9")
        buf.write("\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2")
        buf.write("\u01bb\37\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01be\7\36")
        buf.write("\2\2\u01be\u01c0\5\u00a4S\2\u01bf\u01c1\5\22\n\2\u01c0")
        buf.write("\u01bf\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c4\3\2\2\2")
        buf.write("\u01c2\u01c3\7\23\2\2\u01c3\u01c5\5\u00f0y\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6")
        buf.write("\u01c7\7C\2\2\u01c7\u01c9\5\u00f0y\2\u01c8\u01c6\3\2\2")
        buf.write("\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb")
        buf.write("\5$\23\2\u01cb!\3\2\2\2\u01cc\u01d0\7R\2\2\u01cd\u01cf")
        buf.write("\5&\24\2\u01ce\u01cd\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0")
        buf.write("\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d3\3\2\2\2")
        buf.write("\u01d2\u01d0\3\2\2\2\u01d3\u01d4\7S\2\2\u01d4#\3\2\2\2")
        buf.write("\u01d5\u01d9\7R\2\2\u01d6\u01d8\5:\36\2\u01d7\u01d6\3")
        buf.write("\2\2\2\u01d8\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da")
        buf.write("\3\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc")
        buf.write("\u01dd\7S\2\2\u01dd%\3\2\2\2\u01de\u01eb\7V\2\2\u01df")
        buf.write("\u01e1\7(\2\2\u01e0\u01df\3\2\2\2\u01e0\u01e1\3\2\2\2")
        buf.write("\u01e1\u01e2\3\2\2\2\u01e2\u01eb\5\u009eP\2\u01e3\u01e5")
        buf.write("\5\n\6\2\u01e4\u01e3\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e9\3\2\2\2")
        buf.write("\u01e8\u01e6\3\2\2\2\u01e9\u01eb\5(\25\2\u01ea\u01de\3")
        buf.write("\2\2\2\u01ea\u01e0\3\2\2\2\u01ea\u01e6\3\2\2\2\u01eb\'")
        buf.write("\3\2\2\2\u01ec\u01f7\5\u0094K\2\u01ed\u01f7\5*\26\2\u01ee")
        buf.write("\u01f7\5\60\31\2\u01ef\u01f7\58\35\2\u01f0\u01f7\5\64")
        buf.write("\33\2\u01f1\u01f7\5\62\32\2\u01f2\u01f7\5 \21\2\u01f3")
        buf.write("\u01f7\5|?\2\u01f4\u01f7\5\20\t\2\u01f5\u01f7\5\30\r\2")
        buf.write("\u01f6\u01ec\3\2\2\2\u01f6\u01ed\3\2\2\2\u01f6\u01ee\3")
        buf.write("\2\2\2\u01f6\u01ef\3\2\2\2\u01f6\u01f0\3\2\2\2\u01f6\u01f1")
        buf.write("\3\2\2\2\u01f6\u01f2\3\2\2\2\u01f6\u01f3\3\2\2\2\u01f6")
        buf.write("\u01f4\3\2\2\2\u01f6\u01f5\3\2\2\2\u01f7)\3\2\2\2\u01f8")
        buf.write("\u01f9\5.\30\2\u01f9\u01fa\5\u00a4S\2\u01fa\u01ff\5Z.")
        buf.write("\2\u01fb\u01fc\7T\2\2\u01fc\u01fe\7U\2\2\u01fd\u01fb\3")
        buf.write("\2\2\2\u01fe\u0201\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200")
        buf.write("\3\2\2\2\u0200\u0204\3\2\2\2\u0201\u01ff\3\2\2\2\u0202")
        buf.write("\u0203\7/\2\2\u0203\u0205\5X-\2\u0204\u0202\3\2\2\2\u0204")
        buf.write("\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\5,\27\2")
        buf.write("\u0207+\3\2\2\2\u0208\u020b\5\u009eP\2\u0209\u020b\7V")
        buf.write("\2\2\u020a\u0208\3\2\2\2\u020a\u0209\3\2\2\2\u020b-\3")
        buf.write("\2\2\2\u020c\u020f\5\u00f2z\2\u020d\u020f\7\62\2\2\u020e")
        buf.write("\u020c\3\2\2\2\u020e\u020d\3\2\2\2\u020f/\3\2\2\2\u0210")
        buf.write("\u0211\5\22\n\2\u0211\u0212\5*\26\2\u0212\61\3\2\2\2\u0213")
        buf.write("\u0214\5\22\n\2\u0214\u0215\5\64\33\2\u0215\63\3\2\2\2")
        buf.write("\u0216\u0217\5\u00a4S\2\u0217\u021a\5Z.\2\u0218\u0219")
        buf.write("\7/\2\2\u0219\u021b\5X-\2\u021a\u0218\3\2\2\2\u021a\u021b")
        buf.write("\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d\5\u009eP\2\u021d")
        buf.write("\65\3\2\2\2\u021e\u0220\5\n\6\2\u021f\u021e\3\2\2\2\u0220")
        buf.write("\u0223\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2")
        buf.write("\u0222\u0224\3\2\2\2\u0223\u0221\3\2\2\2\u0224\u0225\5")
        buf.write("\u00a4S\2\u0225\u0226\5\u009eP\2\u0226\67\3\2\2\2\u0227")
        buf.write("\u0228\5\u00f2z\2\u0228\u0229\5J&\2\u0229\u022a\7V\2\2")
        buf.write("\u022a9\3\2\2\2\u022b\u022d\5\n\6\2\u022c\u022b\3\2\2")
        buf.write("\2\u022d\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f")
        buf.write("\3\2\2\2\u022f\u0231\3\2\2\2\u0230\u022e\3\2\2\2\u0231")
        buf.write("\u0234\5<\37\2\u0232\u0234\7V\2\2\u0233\u022e\3\2\2\2")
        buf.write("\u0233\u0232\3\2\2\2\u0234;\3\2\2\2\u0235\u023e\5\u0094")
        buf.write("K\2\u0236\u023e\5> \2\u0237\u023e\5B\"\2\u0238\u023e\5")
        buf.write("F$\2\u0239\u023e\5 \21\2\u023a\u023e\5|?\2\u023b\u023e")
        buf.write("\5\20\t\2\u023c\u023e\5\30\r\2\u023d\u0235\3\2\2\2\u023d")
        buf.write("\u0236\3\2\2\2\u023d\u0237\3\2\2\2\u023d\u0238\3\2\2\2")
        buf.write("\u023d\u0239\3\2\2\2\u023d\u023a\3\2\2\2\u023d\u023b\3")
        buf.write("\2\2\2\u023d\u023c\3\2\2\2\u023e=\3\2\2\2\u023f\u0240")
        buf.write("\5\u00f2z\2\u0240\u0245\5@!\2\u0241\u0242\7W\2\2\u0242")
        buf.write("\u0244\5@!\2\u0243\u0241\3\2\2\2\u0244\u0247\3\2\2\2\u0245")
        buf.write("\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0248\3\2\2\2")
        buf.write("\u0247\u0245\3\2\2\2\u0248\u0249\7V\2\2\u0249?\3\2\2\2")
        buf.write("\u024a\u024f\5\u00a4S\2\u024b\u024c\7T\2\2\u024c\u024e")
        buf.write("\7U\2\2\u024d\u024b\3\2\2\2\u024e\u0251\3\2\2\2\u024f")
        buf.write("\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0252\3\2\2\2")
        buf.write("\u0251\u024f\3\2\2\2\u0252\u0253\7Y\2\2\u0253\u0254\5")
        buf.write("P)\2\u0254A\3\2\2\2\u0255\u0257\5D#\2\u0256\u0255\3\2")
        buf.write("\2\2\u0257\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259")
        buf.write("\3\2\2\2\u0259\u025b\3\2\2\2\u025a\u0258\3\2\2\2\u025b")
        buf.write("\u025c\5H%\2\u025cC\3\2\2\2\u025d\u0264\5r:\2\u025e\u0264")
        buf.write("\7%\2\2\u025f\u0264\7\3\2\2\u0260\u0264\7\16\2\2\u0261")
        buf.write("\u0264\7(\2\2\u0262\u0264\7)\2\2\u0263\u025d\3\2\2\2\u0263")
        buf.write("\u025e\3\2\2\2\u0263\u025f\3\2\2\2\u0263\u0260\3\2\2\2")
        buf.write("\u0263\u0261\3\2\2\2\u0263\u0262\3\2\2\2\u0264E\3\2\2")
        buf.write("\2\u0265\u0267\5D#\2\u0266\u0265\3\2\2\2\u0267\u026a\3")
        buf.write("\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b")
        buf.write("\3\2\2\2\u026a\u0268\3\2\2\2\u026b\u026c\5\22\n\2\u026c")
        buf.write("\u026d\5H%\2\u026dG\3\2\2\2\u026e\u0270\5r:\2\u026f\u026e")
        buf.write("\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271")
        buf.write("\u0272\3\2\2\2\u0272\u0274\3\2\2\2\u0273\u0271\3\2\2\2")
        buf.write("\u0274\u0275\5.\30\2\u0275\u0276\5\u00a4S\2\u0276\u027b")
        buf.write("\5Z.\2\u0277\u0278\7T\2\2\u0278\u027a\7U\2\2\u0279\u0277")
        buf.write("\3\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b")
        buf.write("\u027c\3\2\2\2\u027c\u0280\3\2\2\2\u027d\u027b\3\2\2\2")
        buf.write("\u027e\u027f\7/\2\2\u027f\u0281\5X-\2\u0280\u027e\3\2")
        buf.write("\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283")
        buf.write("\5,\27\2\u0283I\3\2\2\2\u0284\u0289\5L\'\2\u0285\u0286")
        buf.write("\7W\2\2\u0286\u0288\5L\'\2\u0287\u0285\3\2\2\2\u0288\u028b")
        buf.write("\3\2\2\2\u0289\u0287\3\2\2\2\u0289\u028a\3\2\2\2\u028a")
        buf.write("K\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u028f\5N(\2\u028d")
        buf.write("\u028e\7Y\2\2\u028e\u0290\5P)\2\u028f\u028d\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290M\3\2\2\2\u0291\u0294\5\u00a4S\2\u0292")
        buf.write("\u0294\5\u0102\u0082\2\u0293\u0291\3\2\2\2\u0293\u0292")
        buf.write("\3\2\2\2\u0294\u0299\3\2\2\2\u0295\u0296\7T\2\2\u0296")
        buf.write("\u0298\7U\2\2\u0297\u0295\3\2\2\2\u0298\u029b\3\2\2\2")
        buf.write("\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029aO\3\2\2")
        buf.write("\2\u029b\u0299\3\2\2\2\u029c\u029f\5R*\2\u029d\u029f\5")
        buf.write("\u00c8e\2\u029e\u029c\3\2\2\2\u029e\u029d\3\2\2\2\u029f")
        buf.write("Q\3\2\2\2\u02a0\u02ac\7R\2\2\u02a1\u02a6\5P)\2\u02a2\u02a3")
        buf.write("\7W\2\2\u02a3\u02a5\5P)\2\u02a4\u02a2\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02aa\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02ab\7W\2\2")
        buf.write("\u02aa\u02a9\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ad\3")
        buf.write("\2\2\2\u02ac\u02a1\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae")
        buf.write("\3\2\2\2\u02ae\u02af\7S\2\2\u02afS\3\2\2\2\u02b0\u02b2")
        buf.write("\5\u00a4S\2\u02b1\u02b3\5\u00f6|\2\u02b2\u02b1\3\2\2\2")
        buf.write("\u02b2\u02b3\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\7")
        buf.write("X\2\2\u02b5\u02b7\3\2\2\2\u02b6\u02b0\3\2\2\2\u02b7\u02ba")
        buf.write("\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02bb\3\2\2\2\u02ba\u02b8\3\2\2\2\u02bb\u02bd\5\u00a6")
        buf.write("T\2\u02bc\u02be\5\u00f6|\2\u02bd\u02bc\3\2\2\2\u02bd\u02be")
        buf.write("\3\2\2\2\u02beU\3\2\2\2\u02bf\u02cc\5\u00f2z\2\u02c0\u02c2")
        buf.write("\5r:\2\u02c1\u02c0\3\2\2\2\u02c2\u02c5\3\2\2\2\u02c3\u02c1")
        buf.write("\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c6\3\2\2\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c6\u02c9\7^\2\2\u02c7\u02c8\t\2\2\2")
        buf.write("\u02c8\u02ca\5\u00f2z\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca")
        buf.write("\3\2\2\2\u02ca\u02cc\3\2\2\2\u02cb\u02bf\3\2\2\2\u02cb")
        buf.write("\u02c3\3\2\2\2\u02ccW\3\2\2\2\u02cd\u02d2\5h\65\2\u02ce")
        buf.write("\u02cf\7W\2\2\u02cf\u02d1\5h\65\2\u02d0\u02ce\3\2\2\2")
        buf.write("\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d2\u02d3\3")
        buf.write("\2\2\2\u02d3Y\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d5\u02e1")
        buf.write("\7P\2\2\u02d6\u02d8\5\\/\2\u02d7\u02d6\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8\u02e2\3\2\2\2\u02d9\u02dc\5\\/\2\u02da")
        buf.write("\u02db\7W\2\2\u02db\u02dd\5^\60\2\u02dc\u02da\3\2\2\2")
        buf.write("\u02dc\u02dd\3\2\2\2\u02dd\u02e2\3\2\2\2\u02de\u02e0\5")
        buf.write("^\60\2\u02df\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2")
        buf.write("\3\2\2\2\u02e1\u02d7\3\2\2\2\u02e1\u02d9\3\2\2\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4\7Q\2\2")
        buf.write("\u02e4[\3\2\2\2\u02e5\u02eb\5\u00f2z\2\u02e6\u02e7\5\u00a4")
        buf.write("S\2\u02e7\u02e8\7X\2\2\u02e8\u02ea\3\2\2\2\u02e9\u02e6")
        buf.write("\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb")
        buf.write("\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2\u02ed\u02eb\3\2\2\2")
        buf.write("\u02ee\u02ef\7-\2\2\u02ef]\3\2\2\2\u02f0\u02f5\5`\61\2")
        buf.write("\u02f1\u02f2\7W\2\2\u02f2\u02f4\5`\61\2\u02f3\u02f1\3")
        buf.write("\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6")
        buf.write("\3\2\2\2\u02f6\u02fa\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8")
        buf.write("\u02f9\7W\2\2\u02f9\u02fb\5b\62\2\u02fa\u02f8\3\2\2\2")
        buf.write("\u02fa\u02fb\3\2\2\2\u02fb\u02fe\3\2\2\2\u02fc\u02fe\5")
        buf.write("b\62\2\u02fd\u02f0\3\2\2\2\u02fd\u02fc\3\2\2\2\u02fe_")
        buf.write("\3\2\2\2\u02ff\u0301\5\16\b\2\u0300\u02ff\3\2\2\2\u0301")
        buf.write("\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2")
        buf.write("\u0303\u0305\3\2\2\2\u0304\u0302\3\2\2\2\u0305\u0306\5")
        buf.write("\u00f2z\2\u0306\u0307\5N(\2\u0307\u030a\3\2\2\2\u0308")
        buf.write("\u030a\5\u0100\u0081\2\u0309\u0302\3\2\2\2\u0309\u0308")
        buf.write("\3\2\2\2\u030aa\3\2\2\2\u030b\u030d\5\16\b\2\u030c\u030b")
        buf.write("\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e")
        buf.write("\u030f\3\2\2\2\u030f\u0311\3\2\2\2\u0310\u030e\3\2\2\2")
        buf.write("\u0311\u0315\5\u00f2z\2\u0312\u0314\5r:\2\u0313\u0312")
        buf.write("\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3\2\2\2\u0315")
        buf.write("\u0316\3\2\2\2\u0316\u0318\3\2\2\2\u0317\u0315\3\2\2\2")
        buf.write("\u0318\u0319\7\u0080\2\2\u0319\u031a\5N(\2\u031ac\3\2")
        buf.write("\2\2\u031b\u0320\5f\64\2\u031c\u031d\7W\2\2\u031d\u031f")
        buf.write("\5f\64\2\u031e\u031c\3\2\2\2\u031f\u0322\3\2\2\2\u0320")
        buf.write("\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321e\3\2\2\2\u0322")
        buf.write("\u0320\3\2\2\2\u0323\u0325\5\16\b\2\u0324\u0323\3\2\2")
        buf.write("\2\u0325\u0328\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0327")
        buf.write("\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u0326\3\2\2\2\u0329")
        buf.write("\u032a\7?\2\2\u032a\u032b\5\u00a4S\2\u032bg\3\2\2\2\u032c")
        buf.write("\u0331\5\u00a4S\2\u032d\u032e\7X\2\2\u032e\u0330\5\u00a4")
        buf.write("S\2\u032f\u032d\3\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332i\3\2\2\2\u0333\u0331")
        buf.write("\3\2\2\2\u0334\u033c\5l\67\2\u0335\u033c\5n8\2\u0336\u033c")
        buf.write("\7L\2\2\u0337\u033c\7M\2\2\u0338\u033c\7K\2\2\u0339\u033c")
        buf.write("\7O\2\2\u033a\u033c\7N\2\2\u033b\u0334\3\2\2\2\u033b\u0335")
        buf.write("\3\2\2\2\u033b\u0336\3\2\2\2\u033b\u0337\3\2\2\2\u033b")
        buf.write("\u0338\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033a\3\2\2\2")
        buf.write("\u033ck\3\2\2\2\u033d\u033e\t\3\2\2\u033em\3\2\2\2\u033f")
        buf.write("\u0340\t\4\2\2\u0340o\3\2\2\2\u0341\u0342\5\u00a4S\2\u0342")
        buf.write("\u0343\7X\2\2\u0343\u0345\3\2\2\2\u0344\u0341\3\2\2\2")
        buf.write("\u0345\u0348\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3")
        buf.write("\2\2\2\u0347\u0349\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u034a")
        buf.write("\7\177\2\2\u034a\u034b\5\u00a4S\2\u034bq\3\2\2\2\u034c")
        buf.write("\u034d\7\177\2\2\u034d\u0350\5h\65\2\u034e\u0350\5p9\2")
        buf.write("\u034f\u034c\3\2\2\2\u034f\u034e\3\2\2\2\u0350\u0357\3")
        buf.write("\2\2\2\u0351\u0354\7P\2\2\u0352\u0355\5t;\2\u0353\u0355")
        buf.write("\5x=\2\u0354\u0352\3\2\2\2\u0354\u0353\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0358\7Q\2\2\u0357")
        buf.write("\u0351\3\2\2\2\u0357\u0358\3\2\2\2\u0358s\3\2\2\2\u0359")
        buf.write("\u035e\5v<\2\u035a\u035b\7W\2\2\u035b\u035d\5v<\2\u035c")
        buf.write("\u035a\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2")
        buf.write("\u035e\u035f\3\2\2\2\u035fu\3\2\2\2\u0360\u035e\3\2\2")
        buf.write("\2\u0361\u0362\5\u00a4S\2\u0362\u0363\7Y\2\2\u0363\u0364")
        buf.write("\5x=\2\u0364w\3\2\2\2\u0365\u0369\5\u00c8e\2\u0366\u0369")
        buf.write("\5r:\2\u0367\u0369\5z>\2\u0368\u0365\3\2\2\2\u0368\u0366")
        buf.write("\3\2\2\2\u0368\u0367\3\2\2\2\u0369y\3\2\2\2\u036a\u0373")
        buf.write("\7R\2\2\u036b\u0370\5x=\2\u036c\u036d\7W\2\2\u036d\u036f")
        buf.write("\5x=\2\u036e\u036c\3\2\2\2\u036f\u0372\3\2\2\2\u0370\u036e")
        buf.write("\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0374\3\2\2\2\u0372")
        buf.write("\u0370\3\2\2\2\u0373\u036b\3\2\2\2\u0373\u0374\3\2\2\2")
        buf.write("\u0374\u0376\3\2\2\2\u0375\u0377\7W\2\2\u0376\u0375\3")
        buf.write("\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379")
        buf.write("\7S\2\2\u0379{\3\2\2\2\u037a\u037b\7\177\2\2\u037b\u037c")
        buf.write("\7\36\2\2\u037c\u037d\5\u00a4S\2\u037d\u037e\5~@\2\u037e")
        buf.write("}\3\2\2\2\u037f\u0383\7R\2\2\u0380\u0382\5\u0080A\2\u0381")
        buf.write("\u0380\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2")
        buf.write("\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0383\3")
        buf.write("\2\2\2\u0386\u0387\7S\2\2\u0387\177\3\2\2\2\u0388\u038a")
        buf.write("\5\n\6\2\u0389\u0388\3\2\2\2\u038a\u038d\3\2\2\2\u038b")
        buf.write("\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038e\3\2\2\2")
        buf.write("\u038d\u038b\3\2\2\2\u038e\u0391\5\u0082B\2\u038f\u0391")
        buf.write("\7V\2\2\u0390\u038b\3\2\2\2\u0390\u038f\3\2\2\2\u0391")
        buf.write("\u0081\3\2\2\2\u0392\u0393\5\u00f2z\2\u0393\u0394\5\u0084")
        buf.write("C\2\u0394\u0395\7V\2\2\u0395\u03ab\3\2\2\2\u0396\u0398")
        buf.write("\5\20\t\2\u0397\u0399\7V\2\2\u0398\u0397\3\2\2\2\u0398")
        buf.write("\u0399\3\2\2\2\u0399\u03ab\3\2\2\2\u039a\u039c\5 \21\2")
        buf.write("\u039b\u039d\7V\2\2\u039c\u039b\3\2\2\2\u039c\u039d\3")
        buf.write("\2\2\2\u039d\u03ab\3\2\2\2\u039e\u03a0\5\30\r\2\u039f")
        buf.write("\u03a1\7V\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2")
        buf.write("\u03a1\u03ab\3\2\2\2\u03a2\u03a4\5|?\2\u03a3\u03a5\7V")
        buf.write("\2\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03ab")
        buf.write("\3\2\2\2\u03a6\u03a8\5\u0094K\2\u03a7\u03a9\7V\2\2\u03a8")
        buf.write("\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\3\2\2\2")
        buf.write("\u03aa\u0392\3\2\2\2\u03aa\u0396\3\2\2\2\u03aa\u039a\3")
        buf.write("\2\2\2\u03aa\u039e\3\2\2\2\u03aa\u03a2\3\2\2\2\u03aa\u03a6")
        buf.write("\3\2\2\2\u03ab\u0083\3\2\2\2\u03ac\u03af\5\u0086D\2\u03ad")
        buf.write("\u03af\5\u0088E\2\u03ae\u03ac\3\2\2\2\u03ae\u03ad\3\2")
        buf.write("\2\2\u03af\u0085\3\2\2\2\u03b0\u03b1\5\u00a4S\2\u03b1")
        buf.write("\u03b2\7P\2\2\u03b2\u03b4\7Q\2\2\u03b3\u03b5\5\u008aF")
        buf.write("\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u0087")
        buf.write("\3\2\2\2\u03b6\u03b7\5J&\2\u03b7\u0089\3\2\2\2\u03b8\u03b9")
        buf.write("\7\16\2\2\u03b9\u03ba\5x=\2\u03ba\u008b\3\2\2\2\u03bb")
        buf.write("\u03bd\7\66\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2")
        buf.write("\2\u03bd\u03be\3\2\2\2\u03be\u03bf\7\65\2\2\u03bf\u03c0")
        buf.write("\5h\65\2\u03c0\u03c1\5\u008eH\2\u03c1\u008d\3\2\2\2\u03c2")
        buf.write("\u03c6\7R\2\2\u03c3\u03c5\5\u0090I\2\u03c4\u03c3\3\2\2")
        buf.write("\2\u03c5\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7")
        buf.write("\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c9")
        buf.write("\u03ca\7S\2\2\u03ca\u008f\3\2\2\2\u03cb\u03cf\7\67\2\2")
        buf.write("\u03cc\u03ce\5\u0092J\2\u03cd\u03cc\3\2\2\2\u03ce\u03d1")
        buf.write("\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0")
        buf.write("\u03d2\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2\u03d3\5h\65\2")
        buf.write("\u03d3\u03d4\7V\2\2\u03d4\u03f0\3\2\2\2\u03d5\u03d6\7")
        buf.write("8\2\2\u03d6\u03d9\5h\65\2\u03d7\u03d8\7:\2\2\u03d8\u03da")
        buf.write("\5h\65\2\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03dc\7V\2\2\u03dc\u03f0\3\2\2\2")
        buf.write("\u03dd\u03de\79\2\2\u03de\u03e1\5h\65\2\u03df\u03e0\7")
        buf.write(":\2\2\u03e0\u03e2\5h\65\2\u03e1\u03df\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\7V\2\2\u03e4")
        buf.write("\u03f0\3\2\2\2\u03e5\u03e6\7;\2\2\u03e6\u03e7\5h\65\2")
        buf.write("\u03e7\u03e8\7V\2\2\u03e8\u03f0\3\2\2\2\u03e9\u03ea\7")
        buf.write("<\2\2\u03ea\u03eb\5h\65\2\u03eb\u03ec\7=\2\2\u03ec\u03ed")
        buf.write("\5h\65\2\u03ed\u03ee\7V\2\2\u03ee\u03f0\3\2\2\2\u03ef")
        buf.write("\u03cb\3\2\2\2\u03ef\u03d5\3\2\2\2\u03ef\u03dd\3\2\2\2")
        buf.write("\u03ef\u03e5\3\2\2\2\u03ef\u03e9\3\2\2\2\u03f0\u0091\3")
        buf.write("\2\2\2\u03f1\u03f2\t\5\2\2\u03f2\u0093\3\2\2\2\u03f3\u03f4")
        buf.write("\7A\2\2\u03f4\u03f6\5\u00a4S\2\u03f5\u03f7\5\22\n\2\u03f6")
        buf.write("\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2")
        buf.write("\u03f8\u03fb\5\u0096L\2\u03f9\u03fa\7\32\2\2\u03fa\u03fc")
        buf.write("\5\u00f0y\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc")
        buf.write("\u03fd\3\2\2\2\u03fd\u03fe\5\u009cO\2\u03fe\u0095\3\2")
        buf.write("\2\2\u03ff\u0401\7P\2\2\u0400\u0402\5\u0098M\2\u0401\u0400")
        buf.write("\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403\3\2\2\2\u0403")
        buf.write("\u0404\7Q\2\2\u0404\u0097\3\2\2\2\u0405\u040a\5\u009a")
        buf.write("N\2\u0406\u0407\7W\2\2\u0407\u0409\5\u009aN\2\u0408\u0406")
        buf.write("\3\2\2\2\u0409\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a")
        buf.write("\u040b\3\2\2\2\u040b\u0099\3\2\2\2\u040c\u040a\3\2\2\2")
        buf.write("\u040d\u040e\5\u00f2z\2\u040e\u040f\5\u00a4S\2\u040f\u009b")
        buf.write("\3\2\2\2\u0410\u0415\7R\2\2\u0411\u0414\5&\24\2\u0412")
        buf.write("\u0414\5\66\34\2\u0413\u0411\3\2\2\2\u0413\u0412\3\2\2")
        buf.write("\2\u0414\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0418\3\2\2\2\u0417\u0415\3\2\2\2\u0418")
        buf.write("\u0419\7S\2\2\u0419\u009d\3\2\2\2\u041a\u041e\7R\2\2\u041b")
        buf.write("\u041d\5\u00a0Q\2\u041c\u041b\3\2\2\2\u041d\u0420\3\2")
        buf.write("\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421")
        buf.write("\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422\7S\2\2\u0422")
        buf.write("\u009f\3\2\2\2\u0423\u0424\5\u00a2R\2\u0424\u0425\7V\2")
        buf.write("\2\u0425\u042b\3\2\2\2\u0426\u042b\5\u00a8U\2\u0427\u042b")
        buf.write("\5\u00aaV\2\u0428\u042b\5\u0100\u0081\2\u0429\u042b\5")
        buf.write("\u0104\u0083\2\u042a\u0423\3\2\2\2\u042a\u0426\3\2\2\2")
        buf.write("\u042a\u0427\3\2\2\2\u042a\u0428\3\2\2\2\u042a\u0429\3")
        buf.write("\2\2\2\u042b\u00a1\3\2\2\2\u042c\u042e\5\16\b\2\u042d")
        buf.write("\u042c\3\2\2\2\u042e\u0431\3\2\2\2\u042f\u042d\3\2\2\2")
        buf.write("\u042f\u0430\3\2\2\2\u0430\u043a\3\2\2\2\u0431\u042f\3")
        buf.write("\2\2\2\u0432\u0433\7?\2\2\u0433\u0434\5\u00a4S\2\u0434")
        buf.write("\u0435\7Y\2\2\u0435\u0436\5\u00c8e\2\u0436\u043b\3\2\2")
        buf.write("\2\u0437\u0438\5\u00f2z\2\u0438\u0439\5J&\2\u0439\u043b")
        buf.write("\3\2\2\2\u043a\u0432\3\2\2\2\u043a\u0437\3\2\2\2\u043b")
        buf.write("\u00a3\3\2\2\2\u043c\u043d\t\6\2\2\u043d\u00a5\3\2\2\2")
        buf.write("\u043e\u043f\t\7\2\2\u043f\u00a7\3\2\2\2\u0440\u0442\5")
        buf.write("\f\7\2\u0441\u0440\3\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0449\3\2\2\2\u0445")
        buf.write("\u0443\3\2\2\2\u0446\u044a\5\20\t\2\u0447\u044a\5 \21")
        buf.write("\2\u0448\u044a\5\u0094K\2\u0449\u0446\3\2\2\2\u0449\u0447")
        buf.write("\3\2\2\2\u0449\u0448\3\2\2\2\u044a\u00a9\3\2\2\2\u044b")
        buf.write("\u04bd\5\u009eP\2\u044c\u044d\7\4\2\2\u044d\u0450\5\u00c8")
        buf.write("e\2\u044e\u044f\7_\2\2\u044f\u0451\5\u00c8e\2\u0450\u044e")
        buf.write("\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452")
        buf.write("\u0453\7V\2\2\u0453\u04bd\3\2\2\2\u0454\u0455\7\30\2\2")
        buf.write("\u0455\u0456\5\u00c2b\2\u0456\u0459\5\u00aaV\2\u0457\u0458")
        buf.write("\7\21\2\2\u0458\u045a\5\u00aaV\2\u0459\u0457\3\2\2\2\u0459")
        buf.write("\u045a\3\2\2\2\u045a\u04bd\3\2\2\2\u045b\u045c\7\27\2")
        buf.write("\2\u045c\u045d\7P\2\2\u045d\u045e\5\u00bc_\2\u045e\u045f")
        buf.write("\7Q\2\2\u045f\u0460\5\u00aaV\2\u0460\u04bd\3\2\2\2\u0461")
        buf.write("\u0462\7\64\2\2\u0462\u0463\5\u00c2b\2\u0463\u0464\5\u00aa")
        buf.write("V\2\u0464\u04bd\3\2\2\2\u0465\u0466\7\17\2\2\u0466\u0467")
        buf.write("\5\u00aaV\2\u0467\u0468\7\64\2\2\u0468\u0469\5\u00c2b")
        buf.write("\2\u0469\u046a\7V\2\2\u046a\u04bd\3\2\2\2\u046b\u046c")
        buf.write("\7\61\2\2\u046c\u0476\5\u009eP\2\u046d\u046f\5\u00acW")
        buf.write("\2\u046e\u046d\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u046e")
        buf.write("\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0473\3\2\2\2\u0472")
        buf.write("\u0474\5\u00b0Y\2\u0473\u0472\3\2\2\2\u0473\u0474\3\2")
        buf.write("\2\2\u0474\u0477\3\2\2\2\u0475\u0477\5\u00b0Y\2\u0476")
        buf.write("\u046e\3\2\2\2\u0476\u0475\3\2\2\2\u0477\u04bd\3\2\2\2")
        buf.write("\u0478\u0479\7\61\2\2\u0479\u047a\5\u00b2Z\2\u047a\u047e")
        buf.write("\5\u009eP\2\u047b\u047d\5\u00acW\2\u047c\u047b\3\2\2\2")
        buf.write("\u047d\u0480\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047f\3")
        buf.write("\2\2\2\u047f\u0482\3\2\2\2\u0480\u047e\3\2\2\2\u0481\u0483")
        buf.write("\5\u00b0Y\2\u0482\u0481\3\2\2\2\u0482\u0483\3\2\2\2\u0483")
        buf.write("\u04bd\3\2\2\2\u0484\u0485\7+\2\2\u0485\u0486\5\u00c2")
        buf.write("b\2\u0486\u048a\7R\2\2\u0487\u0489\5\u00b8]\2\u0488\u0487")
        buf.write("\3\2\2\2\u0489\u048c\3\2\2\2\u048a\u0488\3\2\2\2\u048a")
        buf.write("\u048b\3\2\2\2\u048b\u0490\3\2\2\2\u048c\u048a\3\2\2\2")
        buf.write("\u048d\u048f\5\u00ba^\2\u048e\u048d\3\2\2\2\u048f\u0492")
        buf.write("\3\2\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\u0493\3\2\2\2\u0492\u0490\3\2\2\2\u0493\u0494\7S\2\2")
        buf.write("\u0494\u04bd\3\2\2\2\u0495\u0496\7,\2\2\u0496\u0497\5")
        buf.write("\u00c2b\2\u0497\u0498\5\u009eP\2\u0498\u04bd\3\2\2\2\u0499")
        buf.write("\u049b\7&\2\2\u049a\u049c\5\u00c8e\2\u049b\u049a\3\2\2")
        buf.write("\2\u049b\u049c\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u04bd")
        buf.write("\7V\2\2\u049e\u049f\7.\2\2\u049f\u04a0\5\u00c8e\2\u04a0")
        buf.write("\u04a1\7V\2\2\u04a1\u04bd\3\2\2\2\u04a2\u04a4\7\6\2\2")
        buf.write("\u04a3\u04a5\5\u00a4S\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5")
        buf.write("\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04bd\7V\2\2\u04a7")
        buf.write("\u04a9\7\r\2\2\u04a8\u04aa\5\u00a4S\2\u04a9\u04a8\3\2")
        buf.write("\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04bd")
        buf.write("\7V\2\2\u04ac\u04ad\7@\2\2\u04ad\u04ae\5\u00c8e\2\u04ae")
        buf.write("\u04af\7V\2\2\u04af\u04bd\3\2\2\2\u04b0\u04bd\7V\2\2\u04b1")
        buf.write("\u04b2\5\u00c8e\2\u04b2\u04b3\7V\2\2\u04b3\u04bd\3\2\2")
        buf.write("\2\u04b4\u04b6\5\u00d4k\2\u04b5\u04b7\7V\2\2\u04b6\u04b5")
        buf.write("\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04bd\3\2\2\2\u04b8")
        buf.write("\u04b9\5\u00a4S\2\u04b9\u04ba\7_\2\2\u04ba\u04bb\5\u00aa")
        buf.write("V\2\u04bb\u04bd\3\2\2\2\u04bc\u044b\3\2\2\2\u04bc\u044c")
        buf.write("\3\2\2\2\u04bc\u0454\3\2\2\2\u04bc\u045b\3\2\2\2\u04bc")
        buf.write("\u0461\3\2\2\2\u04bc\u0465\3\2\2\2\u04bc\u046b\3\2\2\2")
        buf.write("\u04bc\u0478\3\2\2\2\u04bc\u0484\3\2\2\2\u04bc\u0495\3")
        buf.write("\2\2\2\u04bc\u0499\3\2\2\2\u04bc\u049e\3\2\2\2\u04bc\u04a2")
        buf.write("\3\2\2\2\u04bc\u04a7\3\2\2\2\u04bc\u04ac\3\2\2\2\u04bc")
        buf.write("\u04b0\3\2\2\2\u04bc\u04b1\3\2\2\2\u04bc\u04b4\3\2\2\2")
        buf.write("\u04bc\u04b8\3\2\2\2\u04bd\u00ab\3\2\2\2\u04be\u04bf\7")
        buf.write("\t\2\2\u04bf\u04c3\7P\2\2\u04c0\u04c2\5\16\b\2\u04c1\u04c0")
        buf.write("\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3")
        buf.write("\u04c4\3\2\2\2\u04c4\u04c6\3\2\2\2\u04c5\u04c3\3\2\2\2")
        buf.write("\u04c6\u04c7\5\u00aeX\2\u04c7\u04c8\5\u00a4S\2\u04c8\u04c9")
        buf.write("\7Q\2\2\u04c9\u04ca\5\u009eP\2\u04ca\u00ad\3\2\2\2\u04cb")
        buf.write("\u04d0\5h\65\2\u04cc\u04cd\7m\2\2\u04cd\u04cf\5h\65\2")
        buf.write("\u04ce\u04cc\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3")
        buf.write("\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u00af\3\2\2\2\u04d2\u04d0")
        buf.write("\3\2\2\2\u04d3\u04d4\7\25\2\2\u04d4\u04d5\5\u009eP\2\u04d5")
        buf.write("\u00b1\3\2\2\2\u04d6\u04d7\7P\2\2\u04d7\u04d9\5\u00b4")
        buf.write("[\2\u04d8\u04da\7V\2\2\u04d9\u04d8\3\2\2\2\u04d9\u04da")
        buf.write("\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\7Q\2\2\u04dc")
        buf.write("\u00b3\3\2\2\2\u04dd\u04e2\5\u00b6\\\2\u04de\u04df\7V")
        buf.write("\2\2\u04df\u04e1\5\u00b6\\\2\u04e0\u04de\3\2\2\2\u04e1")
        buf.write("\u04e4\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2")
        buf.write("\u04e3\u00b5\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e5\u04e7\5")
        buf.write("\16\b\2\u04e6\u04e5\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8")
        buf.write("\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04f0\3\2\2\2")
        buf.write("\u04ea\u04e8\3\2\2\2\u04eb\u04ec\5T+\2\u04ec\u04ed\5N")
        buf.write("(\2\u04ed\u04f1\3\2\2\2\u04ee\u04ef\7?\2\2\u04ef\u04f1")
        buf.write("\5\u00a4S\2\u04f0\u04eb\3\2\2\2\u04f0\u04ee\3\2\2\2\u04f1")
        buf.write("\u04f2\3\2\2\2\u04f2\u04f3\7Y\2\2\u04f3\u04f4\5\u00c8")
        buf.write("e\2\u04f4\u04f7\3\2\2\2\u04f5\u04f7\5h\65\2\u04f6\u04e8")
        buf.write("\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\u00b7\3\2\2\2\u04f8")
        buf.write("\u04fa\5\u00ba^\2\u04f9\u04f8\3\2\2\2\u04fa\u04fb\3\2")
        buf.write("\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fe")
        buf.write("\3\2\2\2\u04fd\u04ff\5\u00a0Q\2\u04fe\u04fd\3\2\2\2\u04ff")
        buf.write("\u0500\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2")
        buf.write("\u0501\u00b9\3\2\2\2\u0502\u0508\7\b\2\2\u0503\u0509\5")
        buf.write("\u00c8e\2\u0504\u0509\7\u0084\2\2\u0505\u0506\5\u00f2")
        buf.write("z\2\u0506\u0507\5\u00a4S\2\u0507\u0509\3\2\2\2\u0508\u0503")
        buf.write("\3\2\2\2\u0508\u0504\3\2\2\2\u0508\u0505\3\2\2\2\u0509")
        buf.write("\u050a\3\2\2\2\u050a\u050e\7_\2\2\u050b\u050c\7\16\2\2")
        buf.write("\u050c\u050e\7_\2\2\u050d\u0502\3\2\2\2\u050d\u050b\3")
        buf.write("\2\2\2\u050e\u00bb\3\2\2\2\u050f\u051c\5\u00c0a\2\u0510")
        buf.write("\u0512\5\u00be`\2\u0511\u0510\3\2\2\2\u0511\u0512\3\2")
        buf.write("\2\2\u0512\u0513\3\2\2\2\u0513\u0515\7V\2\2\u0514\u0516")
        buf.write("\5\u00c8e\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516")
        buf.write("\u0517\3\2\2\2\u0517\u0519\7V\2\2\u0518\u051a\5\u00c4")
        buf.write("c\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051c")
        buf.write("\3\2\2\2\u051b\u050f\3\2\2\2\u051b\u0511\3\2\2\2\u051c")
        buf.write("\u00bd\3\2\2\2\u051d\u0520\5\u00a2R\2\u051e\u0520\5\u00c4")
        buf.write("c\2\u051f\u051d\3\2\2\2\u051f\u051e\3\2\2\2\u0520\u00bf")
        buf.write("\3\2\2\2\u0521\u0523\5\16\b\2\u0522\u0521\3\2\2\2\u0523")
        buf.write("\u0526\3\2\2\2\u0524\u0522\3\2\2\2\u0524\u0525\3\2\2\2")
        buf.write("\u0525\u0529\3\2\2\2\u0526\u0524\3\2\2\2\u0527\u052a\5")
        buf.write("\u00f2z\2\u0528\u052a\7?\2\2\u0529\u0527\3\2\2\2\u0529")
        buf.write("\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052c\5N(\2\u052c")
        buf.write("\u052d\7_\2\2\u052d\u052e\5\u00c8e\2\u052e\u00c1\3\2\2")
        buf.write("\2\u052f\u0530\7P\2\2\u0530\u0531\5\u00c8e\2\u0531\u0532")
        buf.write("\7Q\2\2\u0532\u00c3\3\2\2\2\u0533\u0538\5\u00c8e\2\u0534")
        buf.write("\u0535\7W\2\2\u0535\u0537\5\u00c8e\2\u0536\u0534\3\2\2")
        buf.write("\2\u0537\u053a\3\2\2\2\u0538\u0536\3\2\2\2\u0538\u0539")
        buf.write("\3\2\2\2\u0539\u00c5\3\2\2\2\u053a\u0538\3\2\2\2\u053b")
        buf.write("\u053f\5\u00a4S\2\u053c\u053f\7-\2\2\u053d\u053f\7*\2")
        buf.write("\2\u053e\u053b\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053d")
        buf.write("\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0541\5\u00fc\177\2")
        buf.write("\u0541\u00c7\3\2\2\2\u0542\u0543\be\1\2\u0543\u056e\5")
        buf.write("\u00d2j\2\u0544\u056e\5\u00c6d\2\u0545\u0546\5\u00f2z")
        buf.write("\2\u0546\u054c\7~\2\2\u0547\u0549\5\u00f6|\2\u0548\u0547")
        buf.write("\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054a\3\2\2\2\u054a")
        buf.write("\u054d\5\u00a4S\2\u054b\u054d\7!\2\2\u054c\u0548\3\2\2")
        buf.write("\2\u054c\u054b\3\2\2\2\u054d\u056e\3\2\2\2\u054e\u054f")
        buf.write("\5\u00dco\2\u054f\u0551\7~\2\2\u0550\u0552\5\u00f6|\2")
        buf.write("\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3")
        buf.write("\2\2\2\u0553\u0554\7!\2\2\u0554\u056e\3\2\2\2\u0555\u056e")
        buf.write("\5\u00d4k\2\u0556\u0557\t\b\2\2\u0557\u056e\5\u00c8e\23")
        buf.write("\u0558\u055c\7P\2\2\u0559\u055b\5r:\2\u055a\u0559\3\2")
        buf.write("\2\2\u055b\u055e\3\2\2\2\u055c\u055a\3\2\2\2\u055c\u055d")
        buf.write("\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u055c\3\2\2\2\u055f")
        buf.write("\u0564\5\u00f2z\2\u0560\u0561\7l\2\2\u0561\u0563\5\u00f2")
        buf.write("z\2\u0562\u0560\3\2\2\2\u0563\u0566\3\2\2\2\u0564\u0562")
        buf.write("\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0567\3\2\2\2\u0566")
        buf.write("\u0564\3\2\2\2\u0567\u0568\7Q\2\2\u0568\u0569\5\u00c8")
        buf.write("e\22\u0569\u056e\3\2\2\2\u056a\u056b\7!\2\2\u056b\u056e")
        buf.write("\5\u00dep\2\u056c\u056e\5\u00ccg\2\u056d\u0542\3\2\2\2")
        buf.write("\u056d\u0544\3\2\2\2\u056d\u0545\3\2\2\2\u056d\u054e\3")
        buf.write("\2\2\2\u056d\u0555\3\2\2\2\u056d\u0556\3\2\2\2\u056d\u0558")
        buf.write("\3\2\2\2\u056d\u056a\3\2\2\2\u056d\u056c\3\2\2\2\u056e")
        buf.write("\u05c2\3\2\2\2\u056f\u0570\f\20\2\2\u0570\u0571\t\t\2")
        buf.write("\2\u0571\u05c1\5\u00c8e\21\u0572\u0573\f\17\2\2\u0573")
        buf.write("\u0574\t\n\2\2\u0574\u05c1\5\u00c8e\20\u0575\u057d\f\16")
        buf.write("\2\2\u0576\u0577\7[\2\2\u0577\u057e\7[\2\2\u0578\u0579")
        buf.write("\7Z\2\2\u0579\u057a\7Z\2\2\u057a\u057e\7Z\2\2\u057b\u057c")
        buf.write("\7Z\2\2\u057c\u057e\7Z\2\2\u057d\u0576\3\2\2\2\u057d\u0578")
        buf.write("\3\2\2\2\u057d\u057b\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write("\u05c1\5\u00c8e\17\u0580\u0581\f\r\2\2\u0581\u0582\t\13")
        buf.write("\2\2\u0582\u05c1\5\u00c8e\16\u0583\u0584\f\13\2\2\u0584")
        buf.write("\u0585\t\f\2\2\u0585\u05c1\5\u00c8e\f\u0586\u0587\f\n")
        buf.write("\2\2\u0587\u0588\7l\2\2\u0588\u05c1\5\u00c8e\13\u0589")
        buf.write("\u058a\f\t\2\2\u058a\u058b\7n\2\2\u058b\u05c1\5\u00c8")
        buf.write("e\n\u058c\u058d\f\b\2\2\u058d\u058e\7m\2\2\u058e\u05c1")
        buf.write("\5\u00c8e\t\u058f\u0590\f\7\2\2\u0590\u0591\7d\2\2\u0591")
        buf.write("\u05c1\5\u00c8e\b\u0592\u0593\f\6\2\2\u0593\u0594\7e\2")
        buf.write("\2\u0594\u05c1\5\u00c8e\7\u0595\u0596\f\5\2\2\u0596\u0597")
        buf.write("\7^\2\2\u0597\u0598\5\u00c8e\2\u0598\u0599\7_\2\2\u0599")
        buf.write("\u059a\5\u00c8e\5\u059a\u05c1\3\2\2\2\u059b\u059c\f\4")
        buf.write("\2\2\u059c\u059d\t\r\2\2\u059d\u05c1\5\u00c8e\4\u059e")
        buf.write("\u059f\f\33\2\2\u059f\u05a0\7T\2\2\u05a0\u05a1\5\u00c8")
        buf.write("e\2\u05a1\u05a2\7U\2\2\u05a2\u05c1\3\2\2\2\u05a3\u05a4")
        buf.write("\f\32\2\2\u05a4\u05b0\7X\2\2\u05a5\u05b1\5\u00a4S\2\u05a6")
        buf.write("\u05b1\5\u00c6d\2\u05a7\u05b1\7-\2\2\u05a8\u05aa\7!\2")
        buf.write("\2\u05a9\u05ab\5\u00eex\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab")
        buf.write("\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05b1\5\u00e2r\2\u05ad")
        buf.write("\u05ae\7*\2\2\u05ae\u05b1\5\u00f8}\2\u05af\u05b1\5\u00e8")
        buf.write("u\2\u05b0\u05a5\3\2\2\2\u05b0\u05a6\3\2\2\2\u05b0\u05a7")
        buf.write("\3\2\2\2\u05b0\u05a8\3\2\2\2\u05b0\u05ad\3\2\2\2\u05b0")
        buf.write("\u05af\3\2\2\2\u05b1\u05c1\3\2\2\2\u05b2\u05b3\f\30\2")
        buf.write("\2\u05b3\u05b5\7~\2\2\u05b4\u05b6\5\u00f6|\2\u05b5\u05b4")
        buf.write("\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7")
        buf.write("\u05c1\5\u00a4S\2\u05b8\u05b9\f\24\2\2\u05b9\u05c1\t\16")
        buf.write("\2\2\u05ba\u05bb\f\f\2\2\u05bb\u05be\7\34\2\2\u05bc\u05bf")
        buf.write("\5\u00f2z\2\u05bd\u05bf\5\u00caf\2\u05be\u05bc\3\2\2\2")
        buf.write("\u05be\u05bd\3\2\2\2\u05bf\u05c1\3\2\2\2\u05c0\u056f\3")
        buf.write("\2\2\2\u05c0\u0572\3\2\2\2\u05c0\u0575\3\2\2\2\u05c0\u0580")
        buf.write("\3\2\2\2\u05c0\u0583\3\2\2\2\u05c0\u0586\3\2\2\2\u05c0")
        buf.write("\u0589\3\2\2\2\u05c0\u058c\3\2\2\2\u05c0\u058f\3\2\2\2")
        buf.write("\u05c0\u0592\3\2\2\2\u05c0\u0595\3\2\2\2\u05c0\u059b\3")
        buf.write("\2\2\2\u05c0\u059e\3\2\2\2\u05c0\u05a3\3\2\2\2\u05c0\u05b2")
        buf.write("\3\2\2\2\u05c0\u05b8\3\2\2\2\u05c0\u05ba\3\2\2\2\u05c1")
        buf.write("\u05c4\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2")
        buf.write("\u05c3\u00c9\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c5\u05c7\5")
        buf.write("\16\b\2\u05c6\u05c5\3\2\2\2\u05c7\u05ca\3\2\2\2\u05c8")
        buf.write("\u05c6\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05cb\3\2\2\2")
        buf.write("\u05ca\u05c8\3\2\2\2\u05cb\u05cf\5\u00f2z\2\u05cc\u05ce")
        buf.write("\5r:\2\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf\u05cd")
        buf.write("\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2\u05d1")
        buf.write("\u05cf\3\2\2\2\u05d2\u05d3\5\u00a4S\2\u05d3\u00cb\3\2")
        buf.write("\2\2\u05d4\u05d5\5\u00ceh\2\u05d5\u05d6\7}\2\2\u05d6\u05d7")
        buf.write("\5\u00d0i\2\u05d7\u00cd\3\2\2\2\u05d8\u05ef\5\u00a4S\2")
        buf.write("\u05d9\u05db\7P\2\2\u05da\u05dc\5^\60\2\u05db\u05da\3")
        buf.write("\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05ef")
        buf.write("\7Q\2\2\u05de\u05df\7P\2\2\u05df\u05e4\5\u00a4S\2\u05e0")
        buf.write("\u05e1\7W\2\2\u05e1\u05e3\5\u00a4S\2\u05e2\u05e0\3\2\2")
        buf.write("\2\u05e3\u05e6\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5")
        buf.write("\3\2\2\2\u05e5\u05e7\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e7")
        buf.write("\u05e8\7Q\2\2\u05e8\u05ef\3\2\2\2\u05e9\u05eb\7P\2\2\u05ea")
        buf.write("\u05ec\5d\63\2\u05eb\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2")
        buf.write("\u05ec\u05ed\3\2\2\2\u05ed\u05ef\7Q\2\2\u05ee\u05d8\3")
        buf.write("\2\2\2\u05ee\u05d9\3\2\2\2\u05ee\u05de\3\2\2\2\u05ee\u05e9")
        buf.write("\3\2\2\2\u05ef\u00cf\3\2\2\2\u05f0\u05f3\5\u00c8e\2\u05f1")
        buf.write("\u05f3\5\u009eP\2\u05f2\u05f0\3\2\2\2\u05f2\u05f1\3\2")
        buf.write("\2\2\u05f3\u00d1\3\2\2\2\u05f4\u05f5\7P\2\2\u05f5\u05f6")
        buf.write("\5\u00c8e\2\u05f6\u05f7\7Q\2\2\u05f7\u0608\3\2\2\2\u05f8")
        buf.write("\u0608\7-\2\2\u05f9\u0608\7*\2\2\u05fa\u0608\5j\66\2\u05fb")
        buf.write("\u0608\5\u00a4S\2\u05fc\u0608\5\u0102\u0082\2\u05fd\u05fe")
        buf.write("\5.\30\2\u05fe\u05ff\7X\2\2\u05ff\u0600\7\13\2\2\u0600")
        buf.write("\u0608\3\2\2\2\u0601\u0605\5\u00eex\2\u0602\u0606\5\u00fa")
        buf.write("~\2\u0603\u0604\7-\2\2\u0604\u0606\5\u00fc\177\2\u0605")
        buf.write("\u0602\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0608\3\2\2\2")
        buf.write("\u0607\u05f4\3\2\2\2\u0607\u05f8\3\2\2\2\u0607\u05f9\3")
        buf.write("\2\2\2\u0607\u05fa\3\2\2\2\u0607\u05fb\3\2\2\2\u0607\u05fc")
        buf.write("\3\2\2\2\u0607\u05fd\3\2\2\2\u0607\u0601\3\2\2\2\u0608")
        buf.write("\u00d3\3\2\2\2\u0609\u060a\7+\2\2\u060a\u060b\5\u00c2")
        buf.write("b\2\u060b\u060f\7R\2\2\u060c\u060e\5\u00d6l\2\u060d\u060c")
        buf.write("\3\2\2\2\u060e\u0611\3\2\2\2\u060f\u060d\3\2\2\2\u060f")
        buf.write("\u0610\3\2\2\2\u0610\u0612\3\2\2\2\u0611\u060f\3\2\2\2")
        buf.write("\u0612\u0613\7S\2\2\u0613\u00d5\3\2\2\2\u0614\u0618\7")
        buf.write("\b\2\2\u0615\u0619\5\u00c4c\2\u0616\u0619\7O\2\2\u0617")
        buf.write("\u0619\5\u00d8m\2\u0618\u0615\3\2\2\2\u0618\u0616\3\2")
        buf.write("\2\2\u0618\u0617\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061b")
        buf.write("\t\17\2\2\u061b\u0620\5\u00dan\2\u061c\u061d\7\16\2\2")
        buf.write("\u061d\u061e\t\17\2\2\u061e\u0620\5\u00dan\2\u061f\u0614")
        buf.write("\3\2\2\2\u061f\u061c\3\2\2\2\u0620\u00d7\3\2\2\2\u0621")
        buf.write("\u0622\bm\1\2\u0622\u0623\7P\2\2\u0623\u0624\5\u00d8m")
        buf.write("\2\u0624\u0625\7Q\2\2\u0625\u063c\3\2\2\2\u0626\u0628")
        buf.write("\5\16\b\2\u0627\u0626\3\2\2\2\u0628\u062b\3\2\2\2\u0629")
        buf.write("\u0627\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062c\3\2\2\2")
        buf.write("\u062b\u0629\3\2\2\2\u062c\u0630\5\u00f2z\2\u062d\u062f")
        buf.write("\5r:\2\u062e\u062d\3\2\2\2\u062f\u0632\3\2\2\2\u0630\u062e")
        buf.write("\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0633\3\2\2\2\u0632")
        buf.write("\u0630\3\2\2\2\u0633\u0638\5\u00a4S\2\u0634\u0635\7d\2")
        buf.write("\2\u0635\u0637\5\u00c8e\2\u0636\u0634\3\2\2\2\u0637\u063a")
        buf.write("\3\2\2\2\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639")
        buf.write("\u063c\3\2\2\2\u063a\u0638\3\2\2\2\u063b\u0621\3\2\2\2")
        buf.write("\u063b\u0629\3\2\2\2\u063c\u0642\3\2\2\2\u063d\u063e\f")
        buf.write("\3\2\2\u063e\u063f\7d\2\2\u063f\u0641\5\u00c8e\2\u0640")
        buf.write("\u063d\3\2\2\2\u0641\u0644\3\2\2\2\u0642\u0640\3\2\2\2")
        buf.write("\u0642\u0643\3\2\2\2\u0643\u00d9\3\2\2\2\u0644\u0642\3")
        buf.write("\2\2\2\u0645\u064d\5\u009eP\2\u0646\u0648\5\u00a0Q\2\u0647")
        buf.write("\u0646\3\2\2\2\u0648\u064b\3\2\2\2\u0649\u0647\3\2\2\2")
        buf.write("\u0649\u064a\3\2\2\2\u064a\u064d\3\2\2\2\u064b\u0649\3")
        buf.write("\2\2\2\u064c\u0645\3\2\2\2\u064c\u0649\3\2\2\2\u064d\u00db")
        buf.write("\3\2\2\2\u064e\u064f\5T+\2\u064f\u0650\7X\2\2\u0650\u0652")
        buf.write("\3\2\2\2\u0651\u064e\3\2\2\2\u0651\u0652\3\2\2\2\u0652")
        buf.write("\u0656\3\2\2\2\u0653\u0655\5r:\2\u0654\u0653\3\2\2\2\u0655")
        buf.write("\u0658\3\2\2\2\u0656\u0654\3\2\2\2\u0656\u0657\3\2\2\2")
        buf.write("\u0657\u0659\3\2\2\2\u0658\u0656\3\2\2\2\u0659\u065b\5")
        buf.write("\u00a4S\2\u065a\u065c\5\u00f6|\2\u065b\u065a\3\2\2\2\u065b")
        buf.write("\u065c\3\2\2\2\u065c\u00dd\3\2\2\2\u065d\u065f\5\u00ee")
        buf.write("x\2\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0660")
        buf.write("\3\2\2\2\u0660\u0661\5\u00e0q\2\u0661\u0662\5\u00e6t\2")
        buf.write("\u0662\u0667\3\2\2\2\u0663\u0664\5\u00e0q\2\u0664\u0665")
        buf.write("\5\u00e4s\2\u0665\u0667\3\2\2\2\u0666\u065e\3\2\2\2\u0666")
        buf.write("\u0663\3\2\2\2\u0667\u00df\3\2\2\2\u0668\u066a\5\u00a4")
        buf.write("S\2\u0669\u066b\5\u00eav\2\u066a\u0669\3\2\2\2\u066a\u066b")
        buf.write("\3\2\2\2\u066b\u0673\3\2\2\2\u066c\u066d\7X\2\2\u066d")
        buf.write("\u066f\5\u00a4S\2\u066e\u0670\5\u00eav\2\u066f\u066e\3")
        buf.write("\2\2\2\u066f\u0670\3\2\2\2\u0670\u0672\3\2\2\2\u0671\u066c")
        buf.write("\3\2\2\2\u0672\u0675\3\2\2\2\u0673\u0671\3\2\2\2\u0673")
        buf.write("\u0674\3\2\2\2\u0674\u0678\3\2\2\2\u0675\u0673\3\2\2\2")
        buf.write("\u0676\u0678\5\u00f4{\2\u0677\u0668\3\2\2\2\u0677\u0676")
        buf.write("\3\2\2\2\u0678\u00e1\3\2\2\2\u0679\u067b\5\u00a4S\2\u067a")
        buf.write("\u067c\5\u00ecw\2\u067b\u067a\3\2\2\2\u067b\u067c\3\2")
        buf.write("\2\2\u067c\u067d\3\2\2\2\u067d\u067e\5\u00e6t\2\u067e")
        buf.write("\u00e3\3\2\2\2\u067f\u0680\7T\2\2\u0680\u0682\7U\2\2\u0681")
        buf.write("\u067f\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u0681\3\2\2\2")
        buf.write("\u0683\u0684\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0696\5")
        buf.write("R*\2\u0686\u0687\7T\2\2\u0687\u0688\5\u00c8e\2\u0688\u0689")
        buf.write("\7U\2\2\u0689\u068b\3\2\2\2\u068a\u0686\3\2\2\2\u068b")
        buf.write("\u068c\3\2\2\2\u068c\u068a\3\2\2\2\u068c\u068d\3\2\2\2")
        buf.write("\u068d\u0692\3\2\2\2\u068e\u068f\7T\2\2\u068f\u0691\7")
        buf.write("U\2\2\u0690\u068e\3\2\2\2\u0691\u0694\3\2\2\2\u0692\u0690")
        buf.write("\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0696\3\2\2\2\u0694")
        buf.write("\u0692\3\2\2\2\u0695\u0681\3\2\2\2\u0695\u068a\3\2\2\2")
        buf.write("\u0696\u00e5\3\2\2\2\u0697\u0699\5\u00fc\177\2\u0698\u069a")
        buf.write("\5\"\22\2\u0699\u0698\3\2\2\2\u0699\u069a\3\2\2\2\u069a")
        buf.write("\u00e7\3\2\2\2\u069b\u069c\5\u00eex\2\u069c\u069d\5\u00fa")
        buf.write("~\2\u069d\u00e9\3\2\2\2\u069e\u069f\7[\2\2\u069f\u06a2")
        buf.write("\7Z\2\2\u06a0\u06a2\5\u00f6|\2\u06a1\u069e\3\2\2\2\u06a1")
        buf.write("\u06a0\3\2\2\2\u06a2\u00eb\3\2\2\2\u06a3\u06a4\7[\2\2")
        buf.write("\u06a4\u06a7\7Z\2\2\u06a5\u06a7\5\u00eex\2\u06a6\u06a3")
        buf.write("\3\2\2\2\u06a6\u06a5\3\2\2\2\u06a7\u00ed\3\2\2\2\u06a8")
        buf.write("\u06a9\7[\2\2\u06a9\u06aa\5\u00f0y\2\u06aa\u06ab\7Z\2")
        buf.write("\2\u06ab\u00ef\3\2\2\2\u06ac\u06b1\5\u00f2z\2\u06ad\u06ae")
        buf.write("\7W\2\2\u06ae\u06b0\5\u00f2z\2\u06af\u06ad\3\2\2\2\u06b0")
        buf.write("\u06b3\3\2\2\2\u06b1\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2")
        buf.write("\u06b2\u00f1\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b4\u06b6\5")
        buf.write("r:\2\u06b5\u06b4\3\2\2\2\u06b6\u06b9\3\2\2\2\u06b7\u06b5")
        buf.write("\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06bd\3\2\2\2\u06b9")
        buf.write("\u06b7\3\2\2\2\u06ba\u06be\5T+\2\u06bb\u06be\5\u00f4{")
        buf.write("\2\u06bc\u06be\5\u0102\u0082\2\u06bd\u06ba\3\2\2\2\u06bd")
        buf.write("\u06bb\3\2\2\2\u06bd\u06bc\3\2\2\2\u06be\u06c9\3\2\2\2")
        buf.write("\u06bf\u06c1\5r:\2\u06c0\u06bf\3\2\2\2\u06c1\u06c4\3\2")
        buf.write("\2\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c5")
        buf.write("\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c5\u06c6\7T\2\2\u06c6")
        buf.write("\u06c8\7U\2\2\u06c7\u06c2\3\2\2\2\u06c8\u06cb\3\2\2\2")
        buf.write("\u06c9\u06c7\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u00f3\3")
        buf.write("\2\2\2\u06cb\u06c9\3\2\2\2\u06cc\u06cd\t\20\2\2\u06cd")
        buf.write("\u00f5\3\2\2\2\u06ce\u06cf\7[\2\2\u06cf\u06d4\5V,\2\u06d0")
        buf.write("\u06d1\7W\2\2\u06d1\u06d3\5V,\2\u06d2\u06d0\3\2\2\2\u06d3")
        buf.write("\u06d6\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2\2")
        buf.write("\u06d5\u06d7\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d7\u06d8\7")
        buf.write("Z\2\2\u06d8\u00f7\3\2\2\2\u06d9\u06e3\5\u00fc\177\2\u06da")
        buf.write("\u06dc\7X\2\2\u06db\u06dd\5\u00f6|\2\u06dc\u06db\3\2\2")
        buf.write("\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06e0")
        buf.write("\5\u00a4S\2\u06df\u06e1\5\u00fc\177\2\u06e0\u06df\3\2")
        buf.write("\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06d9")
        buf.write("\3\2\2\2\u06e2\u06da\3\2\2\2\u06e3\u00f9\3\2\2\2\u06e4")
        buf.write("\u06e5\7*\2\2\u06e5\u06ea\5\u00f8}\2\u06e6\u06e7\5\u00a4")
        buf.write("S\2\u06e7\u06e8\5\u00fc\177\2\u06e8\u06ea\3\2\2\2\u06e9")
        buf.write("\u06e4\3\2\2\2\u06e9\u06e6\3\2\2\2\u06ea\u00fb\3\2\2\2")
        buf.write("\u06eb\u06ed\7P\2\2\u06ec\u06ee\5\u00c4c\2\u06ed\u06ec")
        buf.write("\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef")
        buf.write("\u06f0\7Q\2\2\u06f0\u00fd\3\2\2\2\u06f1\u06f2\7|\2\2\u06f2")
        buf.write("\u00ff\3\2\2\2\u06f3\u06f4\7|\2\2\u06f4\u06f5\7j\2\2\u06f5")
        buf.write("\u0101\3\2\2\2\u06f6\u06f7\7|\2\2\u06f7\u06f8\5\u00a4")
        buf.write("S\2\u06f8\u0103\3\2\2\2\u06f9\u06fa\7|\2\2\u06fa\u06fb")
        buf.write("\5\u00aaV\2\u06fb\u0105\3\2\2\2\u00e0\u0107\u010b\u010d")
        buf.write("\u0112\u0114\u011a\u011f\u0128\u012d\u0134\u013c\u0143")
        buf.write("\u014f\u0153\u0158\u015b\u015f\u0163\u0167\u0171\u0179")
        buf.write("\u0181\u0185\u018c\u0193\u0197\u019a\u019d\u01a6\u01ac")
        buf.write("\u01b1\u01b4\u01ba\u01c0\u01c4\u01c8\u01d0\u01d9\u01e0")
        buf.write("\u01e6\u01ea\u01f6\u01ff\u0204\u020a\u020e\u021a\u0221")
        buf.write("\u022e\u0233\u023d\u0245\u024f\u0258\u0263\u0268\u0271")
        buf.write("\u027b\u0280\u0289\u028f\u0293\u0299\u029e\u02a6\u02aa")
        buf.write("\u02ac\u02b2\u02b8\u02bd\u02c3\u02c9\u02cb\u02d2\u02d7")
        buf.write("\u02dc\u02df\u02e1\u02eb\u02f5\u02fa\u02fd\u0302\u0309")
        buf.write("\u030e\u0315\u0320\u0326\u0331\u033b\u0346\u034f\u0354")
        buf.write("\u0357\u035e\u0368\u0370\u0373\u0376\u0383\u038b\u0390")
        buf.write("\u0398\u039c\u03a0\u03a4\u03a8\u03aa\u03ae\u03b4\u03bc")
        buf.write("\u03c6\u03cf\u03d9\u03e1\u03ef\u03f6\u03fb\u0401\u040a")
        buf.write("\u0413\u0415\u041e\u042a\u042f\u043a\u0443\u0449\u0450")
        buf.write("\u0459\u0470\u0473\u0476\u047e\u0482\u048a\u0490\u049b")
        buf.write("\u04a4\u04a9\u04b6\u04bc\u04c3\u04d0\u04d9\u04e2\u04e8")
        buf.write("\u04f0\u04f6\u04fb\u0500\u0508\u050d\u0511\u0515\u0519")
        buf.write("\u051b\u051f\u0524\u0529\u0538\u053e\u0548\u054c\u0551")
        buf.write("\u055c\u0564\u056d\u057d\u05aa\u05b0\u05b5\u05be\u05c0")
        buf.write("\u05c2\u05c8\u05cf\u05db\u05e4\u05eb\u05ee\u05f2\u0605")
        buf.write("\u0607\u060f\u0618\u061f\u0629\u0630\u0638\u063b\u0642")
        buf.write("\u0649\u064c\u0651\u0656\u065b\u065e\u0666\u066a\u066f")
        buf.write("\u0673\u0677\u067b\u0683\u068c\u0692\u0695\u0699\u06a1")
        buf.write("\u06a6\u06b1\u06b7\u06bd\u06c2\u06c9\u06d4\u06dc\u06e0")
        buf.write("\u06e2\u06e9\u06ed")
        return buf.getvalue()


class JavaParser ( Parser ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "'module'", "'open'", "'requires'", "'exports'", "'opens'", 
                     "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
                     "'var'", "'yield'", "'record'", "'sealed'", "'permits'", 
                     "'non-sealed'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
                     "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "<INVALID>", "'#'", 
                     "'->'", "'::'", "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
                      "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", 
                      "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", 
                      "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
                      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "WILDCARD_SPACE", "WILDCARD", "ARROW", "COLONCOLON", 
                      "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
                      "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_typeParameters = 8
    RULE_typeParameter = 9
    RULE_typeBound = 10
    RULE_enumDeclaration = 11
    RULE_enumConstants = 12
    RULE_enumConstant = 13
    RULE_enumBodyDeclarations = 14
    RULE_interfaceDeclaration = 15
    RULE_classBody = 16
    RULE_interfaceBody = 17
    RULE_classBodyDeclaration = 18
    RULE_memberDeclaration = 19
    RULE_methodDeclaration = 20
    RULE_methodBody = 21
    RULE_typeTypeOrVoid = 22
    RULE_genericMethodDeclaration = 23
    RULE_genericConstructorDeclaration = 24
    RULE_constructorDeclaration = 25
    RULE_compactConstructorDeclaration = 26
    RULE_fieldDeclaration = 27
    RULE_interfaceBodyDeclaration = 28
    RULE_interfaceMemberDeclaration = 29
    RULE_constDeclaration = 30
    RULE_constantDeclarator = 31
    RULE_interfaceMethodDeclaration = 32
    RULE_interfaceMethodModifier = 33
    RULE_genericInterfaceMethodDeclaration = 34
    RULE_interfaceCommonBodyDeclaration = 35
    RULE_variableDeclarators = 36
    RULE_variableDeclarator = 37
    RULE_variableDeclaratorId = 38
    RULE_variableInitializer = 39
    RULE_arrayInitializer = 40
    RULE_classOrInterfaceType = 41
    RULE_typeArgument = 42
    RULE_qualifiedNameList = 43
    RULE_formalParameters = 44
    RULE_receiverParameter = 45
    RULE_formalParameterList = 46
    RULE_formalParameter = 47
    RULE_lastFormalParameter = 48
    RULE_lambdaLVTIList = 49
    RULE_lambdaLVTIParameter = 50
    RULE_qualifiedName = 51
    RULE_literal = 52
    RULE_integerLiteral = 53
    RULE_floatLiteral = 54
    RULE_altAnnotationQualifiedName = 55
    RULE_annotation = 56
    RULE_elementValuePairs = 57
    RULE_elementValuePair = 58
    RULE_elementValue = 59
    RULE_elementValueArrayInitializer = 60
    RULE_annotationTypeDeclaration = 61
    RULE_annotationTypeBody = 62
    RULE_annotationTypeElementDeclaration = 63
    RULE_annotationTypeElementRest = 64
    RULE_annotationMethodOrConstantRest = 65
    RULE_annotationMethodRest = 66
    RULE_annotationConstantRest = 67
    RULE_defaultValue = 68
    RULE_moduleDeclaration = 69
    RULE_moduleBody = 70
    RULE_moduleDirective = 71
    RULE_requiresModifier = 72
    RULE_recordDeclaration = 73
    RULE_recordHeader = 74
    RULE_recordComponentList = 75
    RULE_recordComponent = 76
    RULE_recordBody = 77
    RULE_block = 78
    RULE_blockStatement = 79
    RULE_localVariableDeclaration = 80
    RULE_identifier = 81
    RULE_typeIdentifier = 82
    RULE_localTypeDeclaration = 83
    RULE_statement = 84
    RULE_catchClause = 85
    RULE_catchType = 86
    RULE_finallyBlock = 87
    RULE_resourceSpecification = 88
    RULE_resources = 89
    RULE_resource = 90
    RULE_switchBlockStatementGroup = 91
    RULE_switchLabel = 92
    RULE_forControl = 93
    RULE_forInit = 94
    RULE_enhancedForControl = 95
    RULE_parExpression = 96
    RULE_expressionList = 97
    RULE_methodCall = 98
    RULE_expression = 99
    RULE_pattern = 100
    RULE_lambdaExpression = 101
    RULE_lambdaParameters = 102
    RULE_lambdaBody = 103
    RULE_primary = 104
    RULE_switchExpression = 105
    RULE_switchLabeledRule = 106
    RULE_guardedPattern = 107
    RULE_switchRuleOutcome = 108
    RULE_classType = 109
    RULE_creator = 110
    RULE_createdName = 111
    RULE_innerCreator = 112
    RULE_arrayCreatorRest = 113
    RULE_classCreatorRest = 114
    RULE_explicitGenericInvocation = 115
    RULE_typeArgumentsOrDiamond = 116
    RULE_nonWildcardTypeArgumentsOrDiamond = 117
    RULE_nonWildcardTypeArguments = 118
    RULE_typeList = 119
    RULE_typeType = 120
    RULE_primitiveType = 121
    RULE_typeArguments = 122
    RULE_superSuffix = 123
    RULE_explicitGenericInvocationSuffix = 124
    RULE_arguments = 125
    RULE_simple_wildcard = 126
    RULE_list_wildcard = 127
    RULE_var_wildcard = 128
    RULE_simple_compound_wildcard = 129

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                   "constructorDeclaration", "compactConstructorDeclaration", 
                   "fieldDeclaration", "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                   "interfaceCommonBodyDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "classOrInterfaceType", "typeArgument", 
                   "qualifiedNameList", "formalParameters", "receiverParameter", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
                   "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
                   "annotation", "elementValuePairs", "elementValuePair", 
                   "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleBody", "moduleDirective", 
                   "requiresModifier", "recordDeclaration", "recordHeader", 
                   "recordComponentList", "recordComponent", "recordBody", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "identifier", "typeIdentifier", "localTypeDeclaration", 
                   "statement", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "forInit", "enhancedForControl", 
                   "parExpression", "expressionList", "methodCall", "expression", 
                   "pattern", "lambdaExpression", "lambdaParameters", "lambdaBody", 
                   "primary", "switchExpression", "switchLabeledRule", "guardedPattern", 
                   "switchRuleOutcome", "classType", "creator", "createdName", 
                   "innerCreator", "arrayCreatorRest", "classCreatorRest", 
                   "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments", 
                   "simple_wildcard", "list_wildcard", "var_wildcard", "simple_compound_wildcard" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    MODULE=51
    OPEN=52
    REQUIRES=53
    EXPORTS=54
    OPENS=55
    TO=56
    USES=57
    PROVIDES=58
    WITH=59
    TRANSITIVE=60
    VAR=61
    YIELD=62
    RECORD=63
    SEALED=64
    PERMITS=65
    NON_SEALED=66
    DECIMAL_LITERAL=67
    HEX_LITERAL=68
    OCT_LITERAL=69
    BINARY_LITERAL=70
    FLOAT_LITERAL=71
    HEX_FLOAT_LITERAL=72
    BOOL_LITERAL=73
    CHAR_LITERAL=74
    STRING_LITERAL=75
    TEXT_BLOCK=76
    NULL_LITERAL=77
    LPAREN=78
    RPAREN=79
    LBRACE=80
    RBRACE=81
    LBRACK=82
    RBRACK=83
    SEMI=84
    COMMA=85
    DOT=86
    ASSIGN=87
    GT=88
    LT=89
    BANG=90
    TILDE=91
    QUESTION=92
    COLON=93
    EQUAL=94
    LE=95
    GE=96
    NOTEQUAL=97
    AND=98
    OR=99
    INC=100
    DEC=101
    ADD=102
    SUB=103
    MUL=104
    DIV=105
    BITAND=106
    BITOR=107
    CARET=108
    MOD=109
    ADD_ASSIGN=110
    SUB_ASSIGN=111
    MUL_ASSIGN=112
    DIV_ASSIGN=113
    AND_ASSIGN=114
    OR_ASSIGN=115
    XOR_ASSIGN=116
    MOD_ASSIGN=117
    LSHIFT_ASSIGN=118
    RSHIFT_ASSIGN=119
    URSHIFT_ASSIGN=120
    WILDCARD_SPACE=121
    WILDCARD=122
    ARROW=123
    COLONCOLON=124
    AT=125
    ELLIPSIS=126
    WS=127
    COMMENT=128
    LINE_COMMENT=129
    IDENTIFIER=130

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext,0)


        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 260
                    self.packageDeclaration()


                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 265
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [JavaParser.IMPORT]:
                            self.state = 263
                            self.importDeclaration()
                            pass
                        elif token in [JavaParser.SEMI]:
                            self.state = 264
                            self.match(JavaParser.SEMI)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.CLASS) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                    self.state = 272
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [JavaParser.ABSTRACT, JavaParser.CLASS, JavaParser.ENUM, JavaParser.FINAL, JavaParser.INTERFACE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                        self.state = 270
                        self.typeDeclaration()
                        pass
                    elif token in [JavaParser.SEMI]:
                        self.state = 271
                        self.match(JavaParser.SEMI)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.moduleDeclaration()
                self.state = 278
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageDeclaration" ):
                return visitor.visitPackageDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (JavaParser.WILDCARD - 122)) | (1 << (JavaParser.AT - 122)) | (1 << (JavaParser.IDENTIFIER - 122)))) != 0):
                self.state = 282
                self.annotation()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self.match(JavaParser.PACKAGE)
            self.state = 289
            self.qualifiedName()
            self.state = 290
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(JavaParser.IMPORT)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.STATIC:
                self.state = 293
                self.match(JavaParser.STATIC)


            self.state = 296
            self.qualifiedName()
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.DOT:
                self.state = 297
                self.match(JavaParser.DOT)
                self.state = 298
                self.match(JavaParser.MUL)


            self.state = 301
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDeclaration" ):
                return visitor.visitTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 303
                    self.classOrInterfaceModifier() 
                self.state = 308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CLASS]:
                self.state = 309
                self.classDeclaration()
                pass
            elif token in [JavaParser.ENUM]:
                self.state = 310
                self.enumDeclaration()
                pass
            elif token in [JavaParser.INTERFACE]:
                self.state = 311
                self.interfaceDeclaration()
                pass
            elif token in [JavaParser.AT]:
                self.state = 312
                self.annotationTypeDeclaration()
                pass
            elif token in [JavaParser.RECORD]:
                self.state = 313
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        try:
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.FINAL, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 316
                self.classOrInterfaceModifier()
                pass
            elif token in [JavaParser.NATIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.match(JavaParser.NATIVE)
                pass
            elif token in [JavaParser.SYNCHRONIZED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 318
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [JavaParser.TRANSIENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 319
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [JavaParser.VOLATILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 320
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceModifier" ):
                return visitor.visitClassOrInterfaceModifier(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.annotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.match(JavaParser.PUBLIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 325
                self.match(JavaParser.PROTECTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 326
                self.match(JavaParser.PRIVATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 327
                self.match(JavaParser.STATIC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 328
                self.match(JavaParser.ABSTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 329
                self.match(JavaParser.FINAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 330
                self.match(JavaParser.STRICTFP)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 331
                self.match(JavaParser.SEALED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 332
                self.match(JavaParser.NON_SEALED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableModifier" ):
                return visitor.visitVariableModifier(self)
            else:
                return visitor.visitChildren(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.FINAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.match(JavaParser.FINAL)
                pass
            elif token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def simple_wildcard(self):
            return self.getTypedRuleContext(JavaParser.Simple_wildcardContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(JavaParser.CLASS)
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 340
                self.simple_wildcard()
                pass

            elif la_ == 2:
                self.state = 341
                self.identifier()
                pass


            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 344
                self.typeParameters()


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 347
                self.match(JavaParser.EXTENDS)
                self.state = 348
                self.typeType()


            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 351
                self.match(JavaParser.IMPLEMENTS)
                self.state = 352
                self.typeList()


            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.PERMITS:
                self.state = 355
                self.match(JavaParser.PERMITS)
                self.state = 356
                self.typeList()


            self.state = 359
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(JavaParser.LT)
            self.state = 362
            self.typeParameter()
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 363
                self.match(JavaParser.COMMA)
                self.state = 364
                self.typeParameter()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 372
                    self.annotation() 
                self.state = 377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 378
            self.identifier()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 379
                self.match(JavaParser.EXTENDS)
                self.state = 383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 380
                        self.annotation() 
                    self.state = 385
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 386
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeBound" ):
                return visitor.visitTypeBound(self)
            else:
                return visitor.visitChildren(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.typeType()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.BITAND:
                self.state = 390
                self.match(JavaParser.BITAND)
                self.state = 391
                self.typeType()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDeclaration" ):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(JavaParser.ENUM)
            self.state = 398
            self.identifier()
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 399
                self.match(JavaParser.IMPLEMENTS)
                self.state = 400
                self.typeList()


            self.state = 403
            self.match(JavaParser.LBRACE)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (JavaParser.WILDCARD - 122)) | (1 << (JavaParser.AT - 122)) | (1 << (JavaParser.IDENTIFIER - 122)))) != 0):
                self.state = 404
                self.enumConstants()


            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.COMMA:
                self.state = 407
                self.match(JavaParser.COMMA)


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.SEMI:
                self.state = 410
                self.enumBodyDeclarations()


            self.state = 413
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstants" ):
                return visitor.visitEnumConstants(self)
            else:
                return visitor.visitChildren(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.enumConstant()
            self.state = 420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 416
                    self.match(JavaParser.COMMA)
                    self.state = 417
                    self.enumConstant() 
                self.state = 422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumConstant" ):
                return visitor.visitEnumConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 423
                    self.annotation() 
                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 429
            self.identifier()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LPAREN:
                self.state = 430
                self.arguments()


            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LBRACE:
                self.state = 433
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumBodyDeclarations" ):
                return visitor.visitEnumBodyDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(JavaParser.SEMI)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 437
                self.classBodyDeclaration()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclaration" ):
                return visitor.visitInterfaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(JavaParser.INTERFACE)
            self.state = 444
            self.identifier()
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 445
                self.typeParameters()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 448
                self.match(JavaParser.EXTENDS)
                self.state = 449
                self.typeList()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.PERMITS:
                self.state = 452
                self.match(JavaParser.PERMITS)
                self.state = 453
                self.typeList()


            self.state = 456
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(JavaParser.LBRACE)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 459
                self.classBodyDeclaration()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 465
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBody" ):
                return visitor.visitInterfaceBody(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(JavaParser.LBRACE)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DEFAULT) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 468
                self.interfaceBodyDeclaration()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBodyDeclaration" ):
                return visitor.visitClassBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.STATIC:
                    self.state = 477
                    self.match(JavaParser.STATIC)


                self.state = 480
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 484
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 481
                        self.modifier() 
                    self.state = 486
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                self.state = 487
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_memberDeclaration)
        try:
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self.genericMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 493
                self.fieldDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 494
                self.constructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 495
                self.genericConstructorDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 496
                self.interfaceDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 497
                self.annotationTypeDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 498
                self.classDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 499
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclaration" ):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.typeTypeOrVoid()
            self.state = 503
            self.identifier()
            self.state = 504
            self.formalParameters()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 505
                self.match(JavaParser.LBRACK)
                self.state = 506
                self.match(JavaParser.RBRACK)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 512
                self.match(JavaParser.THROWS)
                self.state = 513
                self.qualifiedNameList()


            self.state = 516
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodBody)
        try:
            self.state = 520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.block()
                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTypeOrVoid" ):
                return visitor.visitTypeTypeOrVoid(self)
            else:
                return visitor.visitChildren(self)




    def typeTypeOrVoid(self):

        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeTypeOrVoid)
        try:
            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD_SPACE, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 522
                self.typeType()
                pass
            elif token in [JavaParser.VOID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMethodDeclaration" ):
                return visitor.visitGenericMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.typeParameters()
            self.state = 527
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericConstructorDeclaration" ):
                return visitor.visitGenericConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.typeParameters()
            self.state = 530
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDeclaration" ):
                return visitor.visitConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.identifier()
            self.state = 533
            self.formalParameters()
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 534
                self.match(JavaParser.THROWS)
                self.state = 535
                self.qualifiedNameList()


            self.state = 538
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compactConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactConstructorDeclaration" ):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactConstructorDeclaration" ):
                listener.exitCompactConstructorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactConstructorDeclaration" ):
                return visitor.visitCompactConstructorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def compactConstructorDeclaration(self):

        localctx = JavaParser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_compactConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 540
                    self.modifier() 
                self.state = 545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 546
            self.identifier()
            self.state = 547
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclaration" ):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.typeType()
            self.state = 550
            self.variableDeclarators()
            self.state = 551
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceBodyDeclaration" ):
                return visitor.visitInterfaceBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.CLASS, JavaParser.DEFAULT, JavaParser.DOUBLE, JavaParser.ENUM, JavaParser.FINAL, JavaParser.FLOAT, JavaParser.INT, JavaParser.INTERFACE, JavaParser.LONG, JavaParser.NATIVE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.SHORT, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.SYNCHRONIZED, JavaParser.TRANSIENT, JavaParser.VOID, JavaParser.VOLATILE, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.LT, JavaParser.WILDCARD_SPACE, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 553
                        self.modifier() 
                    self.state = 558
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                self.state = 559
                self.interfaceMemberDeclaration()
                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 560
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMemberDeclaration" ):
                return visitor.visitInterfaceMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 566
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 567
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 568
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 569
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 570
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclaration" ):
                return visitor.visitConstDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.typeType()
            self.state = 574
            self.constantDeclarator()
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 575
                self.match(JavaParser.COMMA)
                self.state = 576
                self.constantDeclarator()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 582
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclarator" ):
                return visitor.visitConstantDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.identifier()
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 585
                self.match(JavaParser.LBRACK)
                self.state = 586
                self.match(JavaParser.RBRACK)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.match(JavaParser.ASSIGN)
            self.state = 593
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodDeclaration" ):
                return visitor.visitInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595
                    self.interfaceMethodModifier() 
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 601
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMethodModifier" ):
                return visitor.visitInterfaceMethodModifier(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMethodModifier(self):

        localctx = JavaParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_interfaceMethodModifier)
        try:
            self.state = 609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.annotation()
                pass
            elif token in [JavaParser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [JavaParser.ABSTRACT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 606
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [JavaParser.STATIC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 607
                self.match(JavaParser.STATIC)
                pass
            elif token in [JavaParser.STRICTFP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 608
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericInterfaceMethodDeclaration" ):
                return visitor.visitGenericInterfaceMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.DEFAULT) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 611
                self.interfaceMethodModifier()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 617
            self.typeParameters()
            self.state = 618
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceCommonBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceCommonBodyDeclaration" ):
                listener.enterInterfaceCommonBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceCommonBodyDeclaration" ):
                listener.exitInterfaceCommonBodyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceCommonBodyDeclaration" ):
                return visitor.visitInterfaceCommonBodyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 620
                    self.annotation() 
                self.state = 625
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 626
            self.typeTypeOrVoid()
            self.state = 627
            self.identifier()
            self.state = 628
            self.formalParameters()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 629
                self.match(JavaParser.LBRACK)
                self.state = 630
                self.match(JavaParser.RBRACK)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 636
                self.match(JavaParser.THROWS)
                self.state = 637
                self.qualifiedNameList()


            self.state = 640
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarators" ):
                return visitor.visitVariableDeclarators(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.variableDeclarator()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 643
                self.match(JavaParser.COMMA)
                self.state = 644
                self.variableDeclarator()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarator" ):
                return visitor.visitVariableDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.variableDeclaratorId()
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.ASSIGN:
                self.state = 651
                self.match(JavaParser.ASSIGN)
                self.state = 652
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(JavaParser.Var_wildcardContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaratorId" ):
                return visitor.visitVariableDeclaratorId(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 655
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 656
                self.var_wildcard()
                pass


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 659
                self.match(JavaParser.LBRACK)
                self.state = 660
                self.match(JavaParser.RBRACK)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableInitializer)
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.arrayInitializer()
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.NEW, JavaParser.SHORT, JavaParser.SUPER, JavaParser.SWITCH, JavaParser.THIS, JavaParser.VOID, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL, JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL, JavaParser.BOOL_LITERAL, JavaParser.CHAR_LITERAL, JavaParser.STRING_LITERAL, JavaParser.TEXT_BLOCK, JavaParser.NULL_LITERAL, JavaParser.LPAREN, JavaParser.LT, JavaParser.BANG, JavaParser.TILDE, JavaParser.INC, JavaParser.DEC, JavaParser.ADD, JavaParser.SUB, JavaParser.WILDCARD_SPACE, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayInitializer" ):
                return visitor.visitArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(JavaParser.LBRACE)
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LBRACE - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                self.state = 671
                self.variableInitializer()
                self.state = 676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 672
                        self.match(JavaParser.COMMA)
                        self.state = 673
                        self.variableInitializer() 
                    self.state = 678
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COMMA:
                    self.state = 679
                    self.match(JavaParser.COMMA)




            self.state = 684
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(JavaParser.TypeIdentifierContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassOrInterfaceType" ):
                return visitor.visitClassOrInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 686
                    self.identifier()
                    self.state = 688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.LT:
                        self.state = 687
                        self.typeArguments()


                    self.state = 690
                    self.match(JavaParser.DOT) 
                self.state = 696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 697
            self.typeIdentifier()
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 698
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgument" ):
                return visitor.visitTypeArgument(self)
            else:
                return visitor.visitChildren(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (JavaParser.WILDCARD - 122)) | (1 << (JavaParser.AT - 122)) | (1 << (JavaParser.IDENTIFIER - 122)))) != 0):
                    self.state = 702
                    self.annotation()
                    self.state = 707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 708
                self.match(JavaParser.QUESTION)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.EXTENDS or _la==JavaParser.SUPER:
                    self.state = 709
                    _la = self._input.LA(1)
                    if not(_la==JavaParser.EXTENDS or _la==JavaParser.SUPER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 710
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.qualifiedName()
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 716
                self.match(JavaParser.COMMA)
                self.state = 717
                self.qualifiedName()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameters" ):
                return visitor.visitFormalParameters(self)
            else:
                return visitor.visitChildren(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(JavaParser.LPAREN)
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (JavaParser.WILDCARD_SPACE - 121)) | (1 << (JavaParser.WILDCARD - 121)) | (1 << (JavaParser.AT - 121)) | (1 << (JavaParser.IDENTIFIER - 121)))) != 0):
                    self.state = 724
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 727
                self.receiverParameter()
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COMMA:
                    self.state = 728
                    self.match(JavaParser.COMMA)
                    self.state = 729
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FINAL - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (JavaParser.WILDCARD_SPACE - 121)) | (1 << (JavaParser.WILDCARD - 121)) | (1 << (JavaParser.AT - 121)) | (1 << (JavaParser.IDENTIFIER - 121)))) != 0):
                    self.state = 732
                    self.formalParameterList()


                pass


            self.state = 737
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverParameter" ):
                return visitor.visitReceiverParameter(self)
            else:
                return visitor.visitChildren(self)




    def receiverParameter(self):

        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.typeType()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.WILDCARD or _la==JavaParser.IDENTIFIER:
                self.state = 740
                self.identifier()
                self.state = 741
                self.match(JavaParser.DOT)
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 748
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.formalParameter()
                self.state = 755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 751
                        self.match(JavaParser.COMMA)
                        self.state = 752
                        self.formalParameter() 
                    self.state = 757
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COMMA:
                    self.state = 758
                    self.match(JavaParser.COMMA)
                    self.state = 759
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 762
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def list_wildcard(self):
            return self.getTypedRuleContext(JavaParser.List_wildcardContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_formalParameter)
        try:
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 765
                        self.variableModifier() 
                    self.state = 770
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 771
                self.typeType()
                self.state = 772
                self.variableDeclaratorId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.list_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLastFormalParameter" ):
                return visitor.visitLastFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def lastFormalParameter(self):

        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 777
                    self.variableModifier() 
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 783
            self.typeType()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (JavaParser.WILDCARD - 122)) | (1 << (JavaParser.AT - 122)) | (1 << (JavaParser.IDENTIFIER - 122)))) != 0):
                self.state = 784
                self.annotation()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self.match(JavaParser.ELLIPSIS)
            self.state = 791
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIList" ):
                return visitor.visitLambdaLVTIList(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIList(self):

        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.lambdaLVTIParameter()
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 794
                self.match(JavaParser.COMMA)
                self.state = 795
                self.lambdaLVTIParameter()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaLVTIParameter" ):
                return visitor.visitLambdaLVTIParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaLVTIParameter(self):

        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 801
                    self.variableModifier() 
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 807
            self.match(JavaParser.VAR)
            self.state = 808
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.identifier()
            self.state = 815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 811
                    self.match(JavaParser.DOT)
                    self.state = 812
                    self.identifier() 
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_literal)
        try:
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.integerLiteral()
                pass
            elif token in [JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.floatLiteral()
                pass
            elif token in [JavaParser.CHAR_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [JavaParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 821
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [JavaParser.BOOL_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 822
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [JavaParser.NULL_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 823
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [JavaParser.TEXT_BLOCK]:
                self.enterOuterAlt(localctx, 7)
                self.state = 824
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if not(_la==JavaParser.FLOAT_LITERAL or _la==JavaParser.HEX_FLOAT_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAltAnnotationQualifiedName" ):
                return visitor.visitAltAnnotationQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.WILDCARD or _la==JavaParser.IDENTIFIER:
                self.state = 831
                self.identifier()
                self.state = 832
                self.match(JavaParser.DOT)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 839
            self.match(JavaParser.AT)
            self.state = 840
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaParser.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 842
                self.match(JavaParser.AT)
                self.state = 843
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 844
                self.altAnnotationQualifiedName()
                pass


            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LPAREN:
                self.state = 847
                self.match(JavaParser.LPAREN)
                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 849
                    self.elementValue()


                self.state = 852
                self.match(JavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePairs" ):
                return visitor.visitElementValuePairs(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePairs(self):

        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.elementValuePair()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 856
                self.match(JavaParser.COMMA)
                self.state = 857
                self.elementValuePair()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValuePair" ):
                return visitor.visitElementValuePair(self)
            else:
                return visitor.visitChildren(self)




    def elementValuePair(self):

        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.identifier()
            self.state = 864
            self.match(JavaParser.ASSIGN)
            self.state = 865
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValue" ):
                return visitor.visitElementValue(self)
            else:
                return visitor.visitChildren(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValue)
        try:
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 869
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementValueArrayInitializer" ):
                return visitor.visitElementValueArrayInitializer(self)
            else:
                return visitor.visitChildren(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(JavaParser.LBRACE)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LBRACE - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                self.state = 873
                self.elementValue()
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 874
                        self.match(JavaParser.COMMA)
                        self.state = 875
                        self.elementValue() 
                    self.state = 880
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)



            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.COMMA:
                self.state = 883
                self.match(JavaParser.COMMA)


            self.state = 886
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeDeclaration" ):
                return visitor.visitAnnotationTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(JavaParser.AT)
            self.state = 889
            self.match(JavaParser.INTERFACE)
            self.state = 890
            self.identifier()
            self.state = 891
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeBody" ):
                return visitor.visitAnnotationTypeBody(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(JavaParser.LBRACE)
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 894
                self.annotationTypeElementDeclaration()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 900
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementDeclaration" ):
                return visitor.visitAnnotationTypeElementDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.CLASS, JavaParser.DOUBLE, JavaParser.ENUM, JavaParser.FINAL, JavaParser.FLOAT, JavaParser.INT, JavaParser.INTERFACE, JavaParser.LONG, JavaParser.NATIVE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.SHORT, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.SYNCHRONIZED, JavaParser.TRANSIENT, JavaParser.VOLATILE, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.WILDCARD_SPACE, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 902
                        self.modifier() 
                    self.state = 907
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 908
                self.annotationTypeElementRest()
                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 909
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationTypeElementRest" ):
                return visitor.visitAnnotationTypeElementRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeElementRest)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.typeType()
                self.state = 913
                self.annotationMethodOrConstantRest()
                self.state = 914
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.classDeclaration()
                self.state = 918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 917
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 920
                self.interfaceDeclaration()
                self.state = 922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 921
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self.enumDeclaration()
                self.state = 926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 925
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 928
                self.annotationTypeDeclaration()
                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 929
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 932
                self.recordDeclaration()
                self.state = 934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 933
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodOrConstantRest" ):
                return visitor.visitAnnotationMethodOrConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationMethodRest" ):
                return visitor.visitAnnotationMethodRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.identifier()
            self.state = 943
            self.match(JavaParser.LPAREN)
            self.state = 944
            self.match(JavaParser.RPAREN)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.DEFAULT:
                self.state = 945
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationConstantRest" ):
                return visitor.visitAnnotationConstantRest(self)
            else:
                return visitor.visitChildren(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(JavaParser.DEFAULT)
            self.state = 951
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(JavaParser.ModuleBodyContext,0)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDeclaration" ):
                return visitor.visitModuleDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def moduleDeclaration(self):

        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.OPEN:
                self.state = 953
                self.match(JavaParser.OPEN)


            self.state = 956
            self.match(JavaParser.MODULE)
            self.state = 957
            self.qualifiedName()
            self.state = 958
            self.moduleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleBody" ):
                return visitor.visitModuleBody(self)
            else:
                return visitor.visitChildren(self)




    def moduleBody(self):

        localctx = JavaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(JavaParser.LBRACE)
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES))) != 0):
                self.state = 961
                self.moduleDirective()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 967
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleDirective" ):
                return visitor.visitModuleDirective(self)
            else:
                return visitor.visitChildren(self)




    def moduleDirective(self):

        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.REQUIRES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.match(JavaParser.REQUIRES)
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 970
                        self.requiresModifier() 
                    self.state = 975
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 976
                self.qualifiedName()
                self.state = 977
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.EXPORTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 979
                self.match(JavaParser.EXPORTS)
                self.state = 980
                self.qualifiedName()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.TO:
                    self.state = 981
                    self.match(JavaParser.TO)
                    self.state = 982
                    self.qualifiedName()


                self.state = 985
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.OPENS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.match(JavaParser.OPENS)
                self.state = 988
                self.qualifiedName()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.TO:
                    self.state = 989
                    self.match(JavaParser.TO)
                    self.state = 990
                    self.qualifiedName()


                self.state = 993
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.USES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 995
                self.match(JavaParser.USES)
                self.state = 996
                self.qualifiedName()
                self.state = 997
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.PROVIDES]:
                self.enterOuterAlt(localctx, 5)
                self.state = 999
                self.match(JavaParser.PROVIDES)
                self.state = 1000
                self.qualifiedName()
                self.state = 1001
                self.match(JavaParser.WITH)
                self.state = 1002
                self.qualifiedName()
                self.state = 1003
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequiresModifier" ):
                return visitor.visitRequiresModifier(self)
            else:
                return visitor.visitChildren(self)




    def requiresModifier(self):

        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            _la = self._input.LA(1)
            if not(_la==JavaParser.STATIC or _la==JavaParser.TRANSITIVE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordDeclaration" ):
                return visitor.visitRecordDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(JavaParser.RECORD)
            self.state = 1010
            self.identifier()
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 1011
                self.typeParameters()


            self.state = 1014
            self.recordHeader()
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 1015
                self.match(JavaParser.IMPLEMENTS)
                self.state = 1016
                self.typeList()


            self.state = 1019
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordHeader" ):
                return visitor.visitRecordHeader(self)
            else:
                return visitor.visitChildren(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(JavaParser.LPAREN)
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (JavaParser.WILDCARD_SPACE - 121)) | (1 << (JavaParser.WILDCARD - 121)) | (1 << (JavaParser.AT - 121)) | (1 << (JavaParser.IDENTIFIER - 121)))) != 0):
                self.state = 1022
                self.recordComponentList()


            self.state = 1025
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponentList" ):
                return visitor.visitRecordComponentList(self)
            else:
                return visitor.visitChildren(self)




    def recordComponentList(self):

        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_recordComponentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.recordComponent()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1028
                self.match(JavaParser.COMMA)
                self.state = 1029
                self.recordComponent()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordComponent" ):
                return visitor.visitRecordComponent(self)
            else:
                return visitor.visitChildren(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.typeType()
            self.state = 1036
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def compactConstructorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CompactConstructorDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.CompactConstructorDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordBody" ):
                return visitor.visitRecordBody(self)
            else:
                return visitor.visitChildren(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(JavaParser.LBRACE)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 1041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1039
                    self.classBodyDeclaration()
                    pass

                elif la_ == 2:
                    self.state = 1040
                    self.compactConstructorDeclaration()
                    pass


                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(JavaParser.LBRACE)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.ASSERT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BREAK) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.CONTINUE) | (1 << JavaParser.DO) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.FOR) | (1 << JavaParser.IF) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NEW) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.RETURN) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SUPER) | (1 << JavaParser.SWITCH) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.THIS) | (1 << JavaParser.THROW) | (1 << JavaParser.TRY) | (1 << JavaParser.VOID) | (1 << JavaParser.WHILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.DECIMAL_LITERAL - 64)) | (1 << (JavaParser.HEX_LITERAL - 64)) | (1 << (JavaParser.OCT_LITERAL - 64)) | (1 << (JavaParser.BINARY_LITERAL - 64)) | (1 << (JavaParser.FLOAT_LITERAL - 64)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 64)) | (1 << (JavaParser.BOOL_LITERAL - 64)) | (1 << (JavaParser.CHAR_LITERAL - 64)) | (1 << (JavaParser.STRING_LITERAL - 64)) | (1 << (JavaParser.TEXT_BLOCK - 64)) | (1 << (JavaParser.NULL_LITERAL - 64)) | (1 << (JavaParser.LPAREN - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.BANG - 64)) | (1 << (JavaParser.TILDE - 64)) | (1 << (JavaParser.INC - 64)) | (1 << (JavaParser.DEC - 64)) | (1 << (JavaParser.ADD - 64)) | (1 << (JavaParser.SUB - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 1049
                self.blockStatement()
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1055
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def list_wildcard(self):
            return self.getTypedRuleContext(JavaParser.List_wildcardContext,0)


        def simple_compound_wildcard(self):
            return self.getTypedRuleContext(JavaParser.Simple_compound_wildcardContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockStatement)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.localVariableDeclaration()
                self.state = 1058
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1062
                self.list_wildcard()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1063
                self.simple_compound_wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1066
                    self.variableModifier() 
                self.state = 1071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1072
                self.match(JavaParser.VAR)
                self.state = 1073
                self.identifier()
                self.state = 1074
                self.match(JavaParser.ASSIGN)
                self.state = 1075
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1077
                self.typeType()
                self.state = 1078
                self.variableDeclarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def WILDCARD(self):
            return self.getToken(JavaParser.WILDCARD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.WILDCARD or _la==JavaParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeIdentifier" ):
                return visitor.visitTypeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def typeIdentifier(self):

        localctx = JavaParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalTypeDeclaration" ):
                return visitor.visitLocalTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localTypeDeclaration(self):

        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_localTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1086
                    self.classOrInterfaceModifier() 
                self.state = 1091
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CLASS]:
                self.state = 1092
                self.classDeclaration()
                pass
            elif token in [JavaParser.INTERFACE]:
                self.state = 1093
                self.interfaceDeclaration()
                pass
            elif token in [JavaParser.RECORD]:
                self.state = 1094
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.match(JavaParser.ASSERT)
                self.state = 1099
                self.expression(0)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COLON:
                    self.state = 1100
                    self.match(JavaParser.COLON)
                    self.state = 1101
                    self.expression(0)


                self.state = 1104
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1106
                self.match(JavaParser.IF)
                self.state = 1107
                self.parExpression()
                self.state = 1108
                self.statement()
                self.state = 1111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1109
                    self.match(JavaParser.ELSE)
                    self.state = 1110
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1113
                self.match(JavaParser.FOR)
                self.state = 1114
                self.match(JavaParser.LPAREN)
                self.state = 1115
                self.forControl()
                self.state = 1116
                self.match(JavaParser.RPAREN)
                self.state = 1117
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1119
                self.match(JavaParser.WHILE)
                self.state = 1120
                self.parExpression()
                self.state = 1121
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1123
                self.match(JavaParser.DO)
                self.state = 1124
                self.statement()
                self.state = 1125
                self.match(JavaParser.WHILE)
                self.state = 1126
                self.parExpression()
                self.state = 1127
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1129
                self.match(JavaParser.TRY)
                self.state = 1130
                self.block()
                self.state = 1140
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.CATCH]:
                    self.state = 1132 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1131
                        self.catchClause()
                        self.state = 1134 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==JavaParser.CATCH):
                            break

                    self.state = 1137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.FINALLY:
                        self.state = 1136
                        self.finallyBlock()


                    pass
                elif token in [JavaParser.FINALLY]:
                    self.state = 1139
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1142
                self.match(JavaParser.TRY)
                self.state = 1143
                self.resourceSpecification()
                self.state = 1144
                self.block()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.CATCH:
                    self.state = 1145
                    self.catchClause()
                    self.state = 1150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.FINALLY:
                    self.state = 1151
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1154
                self.match(JavaParser.SWITCH)
                self.state = 1155
                self.parExpression()
                self.state = 1156
                self.match(JavaParser.LBRACE)
                self.state = 1160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1157
                        self.switchBlockStatementGroup() 
                    self.state = 1162
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.CASE or _la==JavaParser.DEFAULT:
                    self.state = 1163
                    self.switchLabel()
                    self.state = 1168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1169
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1171
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1172
                self.parExpression()
                self.state = 1173
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1175
                self.match(JavaParser.RETURN)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1176
                    self.expression(0)


                self.state = 1179
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1180
                self.match(JavaParser.THROW)
                self.state = 1181
                self.expression(0)
                self.state = 1182
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1184
                self.match(JavaParser.BREAK)
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.WILDCARD or _la==JavaParser.IDENTIFIER:
                    self.state = 1185
                    self.identifier()


                self.state = 1188
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1189
                self.match(JavaParser.CONTINUE)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.WILDCARD or _la==JavaParser.IDENTIFIER:
                    self.state = 1190
                    self.identifier()


                self.state = 1193
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1194
                self.match(JavaParser.YIELD)
                self.state = 1195
                self.expression(0)
                self.state = 1196
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1198
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1199
                localctx.statementExpression = self.expression(0)
                self.state = 1200
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1202
                self.switchExpression()
                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1203
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1206
                localctx.identifierLabel = self.identifier()
                self.state = 1207
                self.match(JavaParser.COLON)
                self.state = 1208
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(JavaParser.CATCH)
            self.state = 1213
            self.match(JavaParser.LPAREN)
            self.state = 1217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1214
                    self.variableModifier() 
                self.state = 1219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

            self.state = 1220
            self.catchType()
            self.state = 1221
            self.identifier()
            self.state = 1222
            self.match(JavaParser.RPAREN)
            self.state = 1223
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchType" ):
                return visitor.visitCatchType(self)
            else:
                return visitor.visitChildren(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.qualifiedName()
            self.state = 1230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.BITOR:
                self.state = 1226
                self.match(JavaParser.BITOR)
                self.state = 1227
                self.qualifiedName()
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(JavaParser.FINALLY)
            self.state = 1234
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResourceSpecification" ):
                return visitor.visitResourceSpecification(self)
            else:
                return visitor.visitChildren(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(JavaParser.LPAREN)
            self.state = 1237
            self.resources()
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.SEMI:
                self.state = 1238
                self.match(JavaParser.SEMI)


            self.state = 1241
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResources" ):
                return visitor.visitResources(self)
            else:
                return visitor.visitChildren(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.resource()
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1244
                    self.match(JavaParser.SEMI)
                    self.state = 1245
                    self.resource() 
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_resource)
        try:
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1251
                        self.variableModifier() 
                    self.state = 1256
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 1262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1257
                    self.classOrInterfaceType()
                    self.state = 1258
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1260
                    self.match(JavaParser.VAR)
                    self.state = 1261
                    self.identifier()
                    pass


                self.state = 1264
                self.match(JavaParser.ASSIGN)
                self.state = 1265
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1267
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlockStatementGroup" ):
                return visitor.visitSwitchBlockStatementGroup(self)
            else:
                return visitor.visitChildren(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1270
                self.switchLabel()
                self.state = 1273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaParser.CASE or _la==JavaParser.DEFAULT):
                    break

            self.state = 1276 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1275
                self.blockStatement()
                self.state = 1278 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.ASSERT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BREAK) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.CONTINUE) | (1 << JavaParser.DO) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.FOR) | (1 << JavaParser.IF) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NEW) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.RETURN) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SUPER) | (1 << JavaParser.SWITCH) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.THIS) | (1 << JavaParser.THROW) | (1 << JavaParser.TRY) | (1 << JavaParser.VOID) | (1 << JavaParser.WHILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.DECIMAL_LITERAL - 64)) | (1 << (JavaParser.HEX_LITERAL - 64)) | (1 << (JavaParser.OCT_LITERAL - 64)) | (1 << (JavaParser.BINARY_LITERAL - 64)) | (1 << (JavaParser.FLOAT_LITERAL - 64)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 64)) | (1 << (JavaParser.BOOL_LITERAL - 64)) | (1 << (JavaParser.CHAR_LITERAL - 64)) | (1 << (JavaParser.STRING_LITERAL - 64)) | (1 << (JavaParser.TEXT_BLOCK - 64)) | (1 << (JavaParser.NULL_LITERAL - 64)) | (1 << (JavaParser.LPAREN - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.BANG - 64)) | (1 << (JavaParser.TILDE - 64)) | (1 << (JavaParser.INC - 64)) | (1 << (JavaParser.DEC - 64)) | (1 << (JavaParser.ADD - 64)) | (1 << (JavaParser.SUB - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabel" ):
                return visitor.visitSwitchLabel(self)
            else:
                return visitor.visitChildren(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_switchLabel)
        try:
            self.state = 1291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.match(JavaParser.CASE)
                self.state = 1286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1281
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1282
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1283
                    self.typeType()
                    self.state = 1284
                    localctx.varName = self.identifier()
                    pass


                self.state = 1288
                self.match(JavaParser.COLON)
                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1289
                self.match(JavaParser.DEFAULT)
                self.state = 1290
                self.match(JavaParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForControl" ):
                return visitor.visitForControl(self)
            else:
                return visitor.visitChildren(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1293
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FINAL - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1294
                    self.forInit()


                self.state = 1297
                self.match(JavaParser.SEMI)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1298
                    self.expression(0)


                self.state = 1301
                self.match(JavaParser.SEMI)
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1302
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_forInit)
        try:
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1307
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1308
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnhancedForControl" ):
                return visitor.visitEnhancedForControl(self)
            else:
                return visitor.visitChildren(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1311
                    self.variableModifier() 
                self.state = 1316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1317
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1318
                self.match(JavaParser.VAR)
                pass


            self.state = 1321
            self.variableDeclaratorId()
            self.state = 1322
            self.match(JavaParser.COLON)
            self.state = 1323
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParExpression" ):
                return visitor.visitParExpression(self)
            else:
                return visitor.visitChildren(self)




    def parExpression(self):

        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(JavaParser.LPAREN)
            self.state = 1326
            self.expression(0)
            self.state = 1327
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.expression(0)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1330
                self.match(JavaParser.COMMA)
                self.state = 1331
                self.expression(0)
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodCall" ):
                return visitor.visitMethodCall(self)
            else:
                return visitor.visitChildren(self)




    def methodCall(self):

        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD, JavaParser.IDENTIFIER]:
                self.state = 1337
                self.identifier()
                pass
            elif token in [JavaParser.THIS]:
                self.state = 1338
                self.match(JavaParser.THIS)
                pass
            elif token in [JavaParser.SUPER]:
                self.state = 1339
                self.match(JavaParser.SUPER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1342
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)


        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def AND(self):
            return self.getToken(JavaParser.AND, 0)

        def OR(self):
            return self.getToken(JavaParser.OR, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1345
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1346
                self.methodCall()
                pass

            elif la_ == 3:
                self.state = 1347
                self.typeType()
                self.state = 1348
                self.match(JavaParser.COLONCOLON)
                self.state = 1354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.LT, JavaParser.WILDCARD, JavaParser.IDENTIFIER]:
                    self.state = 1350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.LT:
                        self.state = 1349
                        self.typeArguments()


                    self.state = 1352
                    self.identifier()
                    pass
                elif token in [JavaParser.NEW]:
                    self.state = 1353
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 1356
                self.classType()
                self.state = 1357
                self.match(JavaParser.COLONCOLON)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1358
                    self.typeArguments()


                self.state = 1361
                self.match(JavaParser.NEW)
                pass

            elif la_ == 5:
                self.state = 1363
                self.switchExpression()
                pass

            elif la_ == 6:
                self.state = 1364
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (JavaParser.BANG - 90)) | (1 << (JavaParser.TILDE - 90)) | (1 << (JavaParser.INC - 90)) | (1 << (JavaParser.DEC - 90)) | (1 << (JavaParser.ADD - 90)) | (1 << (JavaParser.SUB - 90)))) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1365
                self.expression(17)
                pass

            elif la_ == 7:
                self.state = 1366
                self.match(JavaParser.LPAREN)
                self.state = 1370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1367
                        self.annotation() 
                    self.state = 1372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                self.state = 1373
                self.typeType()
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.BITAND:
                    self.state = 1374
                    self.match(JavaParser.BITAND)
                    self.state = 1375
                    self.typeType()
                    self.state = 1380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1381
                self.match(JavaParser.RPAREN)
                self.state = 1382
                self.expression(16)
                pass

            elif la_ == 8:
                self.state = 1384
                self.match(JavaParser.NEW)
                self.state = 1385
                self.creator()
                pass

            elif la_ == 9:
                self.state = 1386
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1470
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1389
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1390
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (JavaParser.MUL - 104)) | (1 << (JavaParser.DIV - 104)) | (1 << (JavaParser.MOD - 104)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1391
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1392
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1393
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParser.ADD or _la==JavaParser.SUB):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1394
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1395
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1403
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                        if la_ == 1:
                            self.state = 1396
                            self.match(JavaParser.LT)
                            self.state = 1397
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1398
                            self.match(JavaParser.GT)
                            self.state = 1399
                            self.match(JavaParser.GT)
                            self.state = 1400
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1401
                            self.match(JavaParser.GT)
                            self.state = 1402
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1405
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1406
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1407
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (JavaParser.GT - 88)) | (1 << (JavaParser.LT - 88)) | (1 << (JavaParser.LE - 88)) | (1 << (JavaParser.GE - 88)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1408
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1409
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1410
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParser.EQUAL or _la==JavaParser.NOTEQUAL):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1411
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1412
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1413
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1414
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1415
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1416
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1417
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1418
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1419
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1420
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1421
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1422
                        localctx.bop = self.match(JavaParser.AND)
                        self.state = 1423
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1424
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1425
                        localctx.bop = self.match(JavaParser.OR)
                        self.state = 1426
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1427
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1428
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1429
                        self.expression(0)
                        self.state = 1430
                        self.match(JavaParser.COLON)
                        self.state = 1431
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1433
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1434
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (JavaParser.ASSIGN - 87)) | (1 << (JavaParser.ADD_ASSIGN - 87)) | (1 << (JavaParser.SUB_ASSIGN - 87)) | (1 << (JavaParser.MUL_ASSIGN - 87)) | (1 << (JavaParser.DIV_ASSIGN - 87)) | (1 << (JavaParser.AND_ASSIGN - 87)) | (1 << (JavaParser.OR_ASSIGN - 87)) | (1 << (JavaParser.XOR_ASSIGN - 87)) | (1 << (JavaParser.MOD_ASSIGN - 87)) | (1 << (JavaParser.LSHIFT_ASSIGN - 87)) | (1 << (JavaParser.RSHIFT_ASSIGN - 87)) | (1 << (JavaParser.URSHIFT_ASSIGN - 87)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1435
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1436
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1437
                        self.match(JavaParser.LBRACK)
                        self.state = 1438
                        self.expression(0)
                        self.state = 1439
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1441
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1442
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1454
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                        if la_ == 1:
                            self.state = 1443
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1444
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1445
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1446
                            self.match(JavaParser.NEW)
                            self.state = 1448
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==JavaParser.LT:
                                self.state = 1447
                                self.nonWildcardTypeArguments()


                            self.state = 1450
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1451
                            self.match(JavaParser.SUPER)
                            self.state = 1452
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1453
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1456
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1457
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1459
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==JavaParser.LT:
                            self.state = 1458
                            self.typeArguments()


                        self.state = 1461
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1462
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1463
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParser.INC or _la==JavaParser.DEC):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1464
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1465
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1468
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                        if la_ == 1:
                            self.state = 1466
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1467
                            self.pattern()
                            pass


                        pass

             
                self.state = 1474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1475
                    self.variableModifier() 
                self.state = 1480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1481
            self.typeType()
            self.state = 1485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1482
                    self.annotation() 
                self.state = 1487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1488
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaExpression" ):
                return visitor.visitLambdaExpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.lambdaParameters()
            self.state = 1491
            self.match(JavaParser.ARROW)
            self.state = 1492
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1494
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1495
                self.match(JavaParser.LPAREN)
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FINAL - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (JavaParser.WILDCARD_SPACE - 121)) | (1 << (JavaParser.WILDCARD - 121)) | (1 << (JavaParser.AT - 121)) | (1 << (JavaParser.IDENTIFIER - 121)))) != 0):
                    self.state = 1496
                    self.formalParameterList()


                self.state = 1499
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1500
                self.match(JavaParser.LPAREN)
                self.state = 1501
                self.identifier()
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.COMMA:
                    self.state = 1502
                    self.match(JavaParser.COMMA)
                    self.state = 1503
                    self.identifier()
                    self.state = 1508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1509
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1511
                self.match(JavaParser.LPAREN)
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (JavaParser.FINAL - 18)) | (1 << (JavaParser.MODULE - 18)) | (1 << (JavaParser.OPEN - 18)) | (1 << (JavaParser.REQUIRES - 18)) | (1 << (JavaParser.EXPORTS - 18)) | (1 << (JavaParser.OPENS - 18)) | (1 << (JavaParser.TO - 18)) | (1 << (JavaParser.USES - 18)) | (1 << (JavaParser.PROVIDES - 18)) | (1 << (JavaParser.WITH - 18)) | (1 << (JavaParser.TRANSITIVE - 18)) | (1 << (JavaParser.VAR - 18)) | (1 << (JavaParser.YIELD - 18)) | (1 << (JavaParser.RECORD - 18)) | (1 << (JavaParser.SEALED - 18)) | (1 << (JavaParser.PERMITS - 18)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (JavaParser.WILDCARD - 122)) | (1 << (JavaParser.AT - 122)) | (1 << (JavaParser.IDENTIFIER - 122)))) != 0):
                    self.state = 1512
                    self.lambdaLVTIList()


                self.state = 1515
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaBody" ):
                return visitor.visitLambdaBody(self)
            else:
                return visitor.visitChildren(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lambdaBody)
        try:
            self.state = 1520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.NEW, JavaParser.SHORT, JavaParser.SUPER, JavaParser.SWITCH, JavaParser.THIS, JavaParser.VOID, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL, JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL, JavaParser.BOOL_LITERAL, JavaParser.CHAR_LITERAL, JavaParser.STRING_LITERAL, JavaParser.TEXT_BLOCK, JavaParser.NULL_LITERAL, JavaParser.LPAREN, JavaParser.LT, JavaParser.BANG, JavaParser.TILDE, JavaParser.INC, JavaParser.DEC, JavaParser.ADD, JavaParser.SUB, JavaParser.WILDCARD_SPACE, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.expression(0)
                pass
            elif token in [JavaParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(JavaParser.Var_wildcardContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_primary)
        try:
            self.state = 1541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.match(JavaParser.LPAREN)
                self.state = 1523
                self.expression(0)
                self.state = 1524
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1526
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1527
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1528
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1529
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1530
                self.var_wildcard()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1531
                self.typeTypeOrVoid()
                self.state = 1532
                self.match(JavaParser.DOT)
                self.state = 1533
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1535
                self.nonWildcardTypeArguments()
                self.state = 1539
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.SUPER, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD, JavaParser.IDENTIFIER]:
                    self.state = 1536
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [JavaParser.THIS]:
                    self.state = 1537
                    self.match(JavaParser.THIS)
                    self.state = 1538
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(JavaParser.SWITCH)
            self.state = 1544
            self.parExpression()
            self.state = 1545
            self.match(JavaParser.LBRACE)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.CASE or _la==JavaParser.DEFAULT:
                self.state = 1546
                self.switchLabeledRule()
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchLabeledRule" ):
                return visitor.visitSwitchLabeledRule(self)
            else:
                return visitor.visitChildren(self)




    def switchLabeledRule(self):

        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.match(JavaParser.CASE)
                self.state = 1558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1556
                    self.match(JavaParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1557
                    self.guardedPattern(0)
                    pass


                self.state = 1560
                _la = self._input.LA(1)
                if not(_la==JavaParser.COLON or _la==JavaParser.ARROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1561
                self.switchRuleOutcome()
                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.match(JavaParser.DEFAULT)
                self.state = 1563
                _la = self._input.LA(1)
                if not(_la==JavaParser.COLON or _la==JavaParser.ARROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1564
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AND)
            else:
                return self.getToken(JavaParser.AND, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuardedPattern" ):
                return visitor.visitGuardedPattern(self)
            else:
                return visitor.visitChildren(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 214
        self.enterRecursionRule(localctx, 214, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LPAREN]:
                self.state = 1568
                self.match(JavaParser.LPAREN)
                self.state = 1569
                self.guardedPattern(0)
                self.state = 1570
                self.match(JavaParser.RPAREN)
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FINAL, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD_SPACE, JavaParser.WILDCARD, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1572
                        self.variableModifier() 
                    self.state = 1577
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                self.state = 1578
                self.typeType()
                self.state = 1582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1579
                        self.annotation() 
                    self.state = 1584
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                self.state = 1585
                self.identifier()
                self.state = 1590
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1586
                        self.match(JavaParser.AND)
                        self.state = 1587
                        self.expression(0) 
                    self.state = 1592
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 1595
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1596
                    self.match(JavaParser.AND)
                    self.state = 1597
                    self.expression(0) 
                self.state = 1602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchRuleOutcome" ):
                return visitor.visitSwitchRuleOutcome(self)
            else:
                return visitor.visitChildren(self)




    def switchRuleOutcome(self):

        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1603
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.ASSERT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BREAK) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.CONTINUE) | (1 << JavaParser.DO) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.FOR) | (1 << JavaParser.IF) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NEW) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.RETURN) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SUPER) | (1 << JavaParser.SWITCH) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.THIS) | (1 << JavaParser.THROW) | (1 << JavaParser.TRY) | (1 << JavaParser.VOID) | (1 << JavaParser.WHILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.DECIMAL_LITERAL - 64)) | (1 << (JavaParser.HEX_LITERAL - 64)) | (1 << (JavaParser.OCT_LITERAL - 64)) | (1 << (JavaParser.BINARY_LITERAL - 64)) | (1 << (JavaParser.FLOAT_LITERAL - 64)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 64)) | (1 << (JavaParser.BOOL_LITERAL - 64)) | (1 << (JavaParser.CHAR_LITERAL - 64)) | (1 << (JavaParser.STRING_LITERAL - 64)) | (1 << (JavaParser.TEXT_BLOCK - 64)) | (1 << (JavaParser.NULL_LITERAL - 64)) | (1 << (JavaParser.LPAREN - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.BANG - 64)) | (1 << (JavaParser.TILDE - 64)) | (1 << (JavaParser.INC - 64)) | (1 << (JavaParser.DEC - 64)) | (1 << (JavaParser.ADD - 64)) | (1 << (JavaParser.SUB - 64)) | (1 << (JavaParser.WILDCARD_SPACE - 64)) | (1 << (JavaParser.WILDCARD - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                    self.state = 1604
                    self.blockStatement()
                    self.state = 1609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassType" ):
                return visitor.visitClassType(self)
            else:
                return visitor.visitChildren(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1612
                self.classOrInterfaceType()
                self.state = 1613
                self.match(JavaParser.DOT)


            self.state = 1620
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1617
                    self.annotation() 
                self.state = 1622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

            self.state = 1623
            self.identifier()
            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 1624
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreator" ):
                return visitor.visitCreator(self)
            else:
                return visitor.visitChildren(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_creator)
        self._la = 0 # Token type
        try:
            self.state = 1636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1627
                    self.nonWildcardTypeArguments()


                self.state = 1630
                self.createdName()
                self.state = 1631
                self.classCreatorRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1633
                self.createdName()
                self.state = 1634
                self.arrayCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatedName" ):
                return visitor.visitCreatedName(self)
            else:
                return visitor.visitChildren(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.identifier()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1639
                    self.typeArgumentsOrDiamond()


                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.DOT:
                    self.state = 1642
                    self.match(JavaParser.DOT)
                    self.state = 1643
                    self.identifier()
                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.LT:
                        self.state = 1644
                        self.typeArgumentsOrDiamond()


                    self.state = 1651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT, JavaParser.WILDCARD_SPACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1652
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerCreator" ):
                return visitor.visitInnerCreator(self)
            else:
                return visitor.visitChildren(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.identifier()
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 1656
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1659
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreatorRest" ):
                return visitor.visitArrayCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 1683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1663 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1661
                    self.match(JavaParser.LBRACK)
                    self.state = 1662
                    self.match(JavaParser.RBRACK)
                    self.state = 1665 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==JavaParser.LBRACK):
                        break

                self.state = 1667
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1672 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1668
                        self.match(JavaParser.LBRACK)
                        self.state = 1669
                        self.expression(0)
                        self.state = 1670
                        self.match(JavaParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1674 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                self.state = 1680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1676
                        self.match(JavaParser.LBRACK)
                        self.state = 1677
                        self.match(JavaParser.RBRACK) 
                    self.state = 1682
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCreatorRest" ):
                return visitor.visitClassCreatorRest(self)
            else:
                return visitor.visitChildren(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            self.arguments()
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1686
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocation" ):
                return visitor.visitExplicitGenericInvocation(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.nonWildcardTypeArguments()
            self.state = 1690
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgumentsOrDiamond" ):
                return visitor.visitTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1692
                self.match(JavaParser.LT)
                self.state = 1693
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1694
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArgumentsOrDiamond" ):
                return visitor.visitNonWildcardTypeArgumentsOrDiamond(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.match(JavaParser.LT)
                self.state = 1698
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1699
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonWildcardTypeArguments" ):
                return visitor.visitNonWildcardTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.match(JavaParser.LT)
            self.state = 1703
            self.typeList()
            self.state = 1704
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.typeType()
            self.state = 1711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1707
                self.match(JavaParser.COMMA)
                self.state = 1708
                self.typeType()
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def var_wildcard(self):
            return self.getTypedRuleContext(JavaParser.Var_wildcardContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeType" ):
                return visitor.visitTypeType(self)
            else:
                return visitor.visitChildren(self)




    def typeType(self):

        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1714
                    self.annotation() 
                self.state = 1719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

            self.state = 1723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.classOrInterfaceType()
                pass

            elif la_ == 2:
                self.state = 1721
                self.primitiveType()
                pass

            elif la_ == 3:
                self.state = 1722
                self.var_wildcard()
                pass


            self.state = 1735
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (JavaParser.WILDCARD - 122)) | (1 << (JavaParser.AT - 122)) | (1 << (JavaParser.IDENTIFIER - 122)))) != 0):
                        self.state = 1725
                        self.annotation()
                        self.state = 1730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1731
                    self.match(JavaParser.LBRACK)
                    self.state = 1732
                    self.match(JavaParser.RBRACK) 
                self.state = 1737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def WILDCARD_SPACE(self):
            return self.getToken(JavaParser.WILDCARD_SPACE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.SHORT))) != 0) or _la==JavaParser.WILDCARD_SPACE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(JavaParser.LT)
            self.state = 1741
            self.typeArgument()
            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1742
                self.match(JavaParser.COMMA)
                self.state = 1743
                self.typeArgument()
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1749
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperSuffix" ):
                return visitor.visitSuperSuffix(self)
            else:
                return visitor.visitChildren(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1751
                self.arguments()
                pass
            elif token in [JavaParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1752
                self.match(JavaParser.DOT)
                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1753
                    self.typeArguments()


                self.state = 1756
                self.identifier()
                self.state = 1758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1757
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitGenericInvocationSuffix" ):
                return visitor.visitExplicitGenericInvocationSuffix(self)
            else:
                return visitor.visitChildren(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.SUPER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1762
                self.match(JavaParser.SUPER)
                self.state = 1763
                self.superSuffix()
                pass
            elif token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.WILDCARD, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1764
                self.identifier()
                self.state = 1765
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(JavaParser.LPAREN)
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.WILDCARD_SPACE - 67)) | (1 << (JavaParser.WILDCARD - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                self.state = 1770
                self.expressionList()


            self.state = 1773
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(JavaParser.WILDCARD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_simple_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_wildcard" ):
                listener.enterSimple_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_wildcard" ):
                listener.exitSimple_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_wildcard" ):
                return visitor.visitSimple_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_wildcard(self):

        localctx = JavaParser.Simple_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_simple_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(JavaParser.WILDCARD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(JavaParser.WILDCARD, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_list_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_wildcard" ):
                listener.enterList_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_wildcard" ):
                listener.exitList_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_wildcard" ):
                return visitor.visitList_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def list_wildcard(self):

        localctx = JavaParser.List_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_list_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(JavaParser.WILDCARD)
            self.state = 1778
            self.match(JavaParser.MUL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(JavaParser.WILDCARD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_var_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_wildcard" ):
                listener.enterVar_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_wildcard" ):
                listener.exitVar_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_wildcard" ):
                return visitor.visitVar_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def var_wildcard(self):

        localctx = JavaParser.Var_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_var_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(JavaParser.WILDCARD)
            self.state = 1781
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_compound_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILDCARD(self):
            return self.getToken(JavaParser.WILDCARD, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_simple_compound_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_compound_wildcard" ):
                listener.enterSimple_compound_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_compound_wildcard" ):
                listener.exitSimple_compound_wildcard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_compound_wildcard" ):
                return visitor.visitSimple_compound_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def simple_compound_wildcard(self):

        localctx = JavaParser.Simple_compound_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_simple_compound_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.match(JavaParser.WILDCARD)
            self.state = 1784
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[99] = self.expression_sempred
        self._predicates[107] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 10)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         




